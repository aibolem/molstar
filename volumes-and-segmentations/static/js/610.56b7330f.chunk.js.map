{"version":3,"file":"static/js/610.56b7330f.chunk.js","mappings":"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","sources":["volume-api-client-lib/volume-api.ts","model/helpers.ts","mesh-extension/mesh-cif-schema.ts","mesh-extension/mesh-utils.ts","mesh-extension/mesh-extension.ts","mesh-extension/choice.ts","mesh-extension/mesh-streaming/server-info.ts","mesh-extension/metadata.ts","mesh-extension/mesh-streaming/behavior.ts","mesh-extension/mesh-streaming/transformers.ts","mesh-extension/examples.ts","model/external-api.ts","model/lattice-segmentation.ts","model/session.ts","model/subject-session-manager.ts","model/model.ts","DevViewer.tsx"],"sourcesContent":["import { type Metadata } from './data';\n\n\nfunction createApiPrefix() {\n    const hostname = process.env.REACT_APP_API_HOSTNAME\n        ? process.env.REACT_APP_API_HOSTNAME : `${window.location.protocol}//${window.location.hostname}`;\n    const port = process.env.REACT_APP_API_PORT;\n    const prefix = process.env.REACT_APP_API_PREFIX\n        ? `/${process.env.REACT_APP_API_PREFIX}` : ``;\n\n    return `${hostname}${port ? ':' + port : ''}${prefix}`;\n}\n\nfunction getGitTag() {\n    return `${process.env.REACT_APP_GIT_TAG ?? ''}`;\n}\n\nfunction getGitSha() {\n    return `${process.env.REACT_APP_GIT_SHA ?? ''}`;\n}\n\n\n// const DEFAULT_API_PREFIX = process.env.REACT_APP_VOLUME_API \n//     ? !process.env.REACT_APP_VOLUME_API.endsWith('/') ? `${process.env.REACT_APP_VOLUME_API}/` : process.env.REACT_APP_VOLUME_API \n//     : 'http://localhost:9000/';\n\nconst DEFAULT_API_PREFIX = createApiPrefix()\nconst GIT_TAG = getGitTag()\nconst GIT_SHA = getGitSha()\n\nconst DEFAULT_VOLUME_SERVER_V1 = `${DEFAULT_API_PREFIX}/v1`;\nconst DEFAULT_VOLUME_SERVER_V2 = `${DEFAULT_API_PREFIX}/v2`;\n\nexport class VolumeApiV1 {\n    public volumeServerUrl: string;\n    public volumeServerGitTag: string;\n    public volumeServerGitSha: string;\n\n    public constructor(\n        volumeServerUrl: string = DEFAULT_VOLUME_SERVER_V1,\n        volumeServerGitTag: string = GIT_TAG,\n        volumeServerGitSha: string = GIT_SHA\n        ) {\n        this.volumeServerUrl = volumeServerUrl.replace(/\\/$/, '');  // trim trailing slash\n        this.volumeServerGitTag = volumeServerGitTag;\n        this.volumeServerGitSha = volumeServerGitSha;\n        console.log('API V1', this.volumeServerUrl)\n\n        console.log(`SHA: ${this.volumeServerGitSha}`)\n        console.log(`GIT TAG: ${this.volumeServerGitTag}`)\n    }\n\n    public metadataUrl(source: string, entryId: string): string {\n        return `${this.volumeServerUrl}/${source}/${entryId}/metadata`;\n    }\n    public volumeAndLatticeUrl(source: string, entryId: string, segmentation: number, box: [[number, number, number], [number, number, number]], maxPoints: number): string {\n        const [[a1, a2, a3], [b1, b2, b3]] = box;\n        return `${this.volumeServerUrl}/${source}/${entryId}/box/${segmentation}/${a1}/${a2}/${a3}/${b1}/${b2}/${b3}/${maxPoints}`;\n    }\n    public meshUrl(source: string, entryId: string, segment: number, detailLevel: number): string {\n        return `${this.volumeServerUrl}/${source}/${entryId}/mesh/${segment}/${detailLevel}`;\n    }\n\n    public async getMetadata(source: string, entryId: string): Promise<Metadata> {\n        const response = await fetch(this.metadataUrl(source, entryId));\n        return await response.json();\n    }\n}\n\nexport class VolumeApiV2 {\n    public volumeServerUrl: string;\n    public volumeServerGitTag: string;\n    public volumeServerGitSha: string;\n    \n    public constructor(\n        volumeServerUrl: string = DEFAULT_VOLUME_SERVER_V2,\n        volumeServerGitTag: string = GIT_TAG,\n        volumeServerGitSha: string = GIT_SHA\n        ) {\n        this.volumeServerUrl = volumeServerUrl.replace(/\\/$/, '');  // trim trailing slash\n        this.volumeServerGitTag = volumeServerGitTag;\n        this.volumeServerGitSha = volumeServerGitSha;\n\n        console.log('API V2', this.volumeServerUrl)\n        console.log(`SHA: ${this.volumeServerGitSha}`)\n        console.log(`GIT TAG: ${this.volumeServerGitTag}`)\n    }\n\n    public entryListUrl(maxEntries: number, keyword?: string): string {\n        return `${this.volumeServerUrl}/list_entries/${maxEntries}/${keyword ?? ''}`;\n    }\n\n    public metadataUrl(source: string, entryId: string): string {\n        return `${this.volumeServerUrl}/${source}/${entryId}/metadata`;\n    }\n    public volumeUrl(source: string, entryId: string, box: [[number, number, number], [number, number, number]] | null, maxPoints: number): string {\n        if (box) {\n            const [[a1, a2, a3], [b1, b2, b3]] = box;\n            return `${this.volumeServerUrl}/${source}/${entryId}/volume/box/${a1}/${a2}/${a3}/${b1}/${b2}/${b3}?max_points=${maxPoints}`;\n        } else {\n            return `${this.volumeServerUrl}/${source}/${entryId}/volume/cell?max_points=${maxPoints}`;\n        }\n    }\n    public latticeUrl(source: string, entryId: string, segmentation: number, box: [[number, number, number], [number, number, number]] | null, maxPoints: number): string {\n        if (box) {\n            const [[a1, a2, a3], [b1, b2, b3]] = box;\n            return `${this.volumeServerUrl}/${source}/${entryId}/segmentation/box/${segmentation}/${a1}/${a2}/${a3}/${b1}/${b2}/${b3}?max_points=${maxPoints}`;\n        } else {\n            return `${this.volumeServerUrl}/${source}/${entryId}/segmentation/cell/${segmentation}?max_points=${maxPoints}`;\n        }\n    }\n    public meshUrl_Json(source: string, entryId: string, segment: number, detailLevel: number): string {\n        return `${this.volumeServerUrl}/${source}/${entryId}/mesh/${segment}/${detailLevel}`;\n    }\n\n    public meshUrl_Bcif(source: string, entryId: string, segment: number, detailLevel: number): string {\n        return `${this.volumeServerUrl}/${source}/${entryId}/mesh_bcif/${segment}/${detailLevel}`;\n    }\n    public volumeInfoUrl(source: string, entryId: string): string {\n        return `${this.volumeServerUrl}/${source}/${entryId}/volume_info`;\n    }\n\n    public async getEntryList(maxEntries: number, keyword?: string): Promise<{ [source: string]: string[] }> {\n        const response = await fetch(this.entryListUrl(maxEntries, keyword));\n        return await response.json();\n    }\n\n    public async getMetadata(source: string, entryId: string): Promise<Metadata> {\n        const response = await fetch(this.metadataUrl(source, entryId));\n        return await response.json();\n    }\n}\n","import { CifFile } from 'molstar/lib/mol-io/reader/cif';\nimport { Volume } from 'molstar/lib/mol-model/volume';\nimport { PluginStateObject } from 'molstar/lib/mol-plugin-state/objects';\nimport { StateTransforms } from 'molstar/lib/mol-plugin-state/transforms';\nimport { PluginUIContext } from 'molstar/lib/mol-plugin-ui/context';\nimport { setSubtreeVisibility } from 'molstar/lib/mol-plugin/behavior/static/state';\nimport { StateBuilder, StateObjectSelector, StateTransformer } from 'molstar/lib/mol-state';\nimport { ParamDefinition as PD } from 'molstar/lib/mol-util/param-definition';\n\nimport { Segment, type Metadata } from '../volume-api-client-lib/data';\nimport { VolumeApiV2 } from '../volume-api-client-lib/volume-api';\n\n\nexport type ExampleType = 'emdb' | 'bioimage' | 'meshes' | 'meshStreaming' | 'auto';\n\n\nexport namespace MetadataUtils {\n    export function meshSegments(metadata: Metadata): number[] {\n        const segmentIds = metadata.grid.segmentation_meshes.mesh_component_numbers.segment_ids;\n        if (segmentIds === undefined) return [];\n        return Object.keys(segmentIds).map(s => parseInt(s));\n    }\n    export function meshSegmentDetails(metadata: Metadata, segmentId: number): number[] {\n        const segmentIds = metadata.grid.segmentation_meshes.mesh_component_numbers.segment_ids;\n        if (segmentIds === undefined) return [];\n        const details = segmentIds[segmentId].detail_lvls;\n        return Object.keys(details).map(s => parseInt(s));\n    }\n    /** Get the worst available detail level that is not worse than preferredDetail. \n     * If preferredDetail is null, get the worst detail level overall.\n     * (worse = greater number) */\n    export function getSufficientDetail(metadata: Metadata, segmentId: number, preferredDetail: number | null) {\n        let availDetails = meshSegmentDetails(metadata, segmentId);\n        if (preferredDetail !== null) {\n            availDetails = availDetails.filter(det => det <= preferredDetail);\n        }\n        return Math.max(...availDetails);\n    }\n    export function annotationsBySegment(metadata: Metadata): { [id: number]: Segment } {\n        const result: { [id: number]: Segment } = {};\n        for (const segment of metadata.annotation.segment_list) {\n            if (segment.id in result) {\n                throw new Error(`Duplicate segment annotation for segment ${segment.id}`);\n            }\n            result[segment.id] = segment;\n        }\n        return result;\n    }\n    export function dropSegments(metadata: Metadata, segments: number[]): void {\n        if (metadata.grid.segmentation_meshes.mesh_component_numbers.segment_ids === undefined) return;\n        const dropSet = new Set(segments);\n        metadata.annotation.segment_list = metadata.annotation.segment_list.filter(seg => !dropSet.has(seg.id));\n        for (const seg of segments) {\n            delete metadata.grid.segmentation_meshes.mesh_component_numbers.segment_ids[seg];\n        }\n    }\n}\n\n\nexport interface UrlFragmentInfo {\n    example?: ExampleType,\n    entry?: string,\n}\nexport namespace UrlFragmentInfo {\n    export function get(): UrlFragmentInfo {\n        const fragment = window.location.hash.replace('#', '');\n        return Object.fromEntries(new URLSearchParams(fragment).entries())\n    }\n    export function set(urlFragmentInfo: UrlFragmentInfo): void {\n        const fragment = new URLSearchParams(urlFragmentInfo).toString();\n        window.location.hash = fragment;\n    }\n}\n\n\nconst CreateTransformer = StateTransformer.builderFactory('cellstar');\n\nexport const CreateVolume = CreateTransformer({\n    name: 'create-transformer',\n    from: PluginStateObject.Root,\n    to: PluginStateObject.Volume.Data,\n    params: {\n        label: PD.Text('Volume', { isHidden: true }),\n        description: PD.Text('', { isHidden: true }),\n        volume: PD.Value<Volume>(undefined as any, { isHidden: true }),\n    }\n})({\n    apply({ params }) {\n        return new PluginStateObject.Volume.Data(params.volume, { label: params.label, description: params.description });\n    }\n})\n\n\nexport class NodeManager {\n    private nodes: { [key: string]: StateObjectSelector };\n\n    constructor() {\n        this.nodes = {};\n    }\n\n    private static nodeExists(node: StateObjectSelector): boolean {\n        try {\n            return node.checkValid();\n        } catch {\n            return false;\n        }\n    }\n\n    public getNode(key: string): StateObjectSelector | undefined {\n        const node = this.nodes[key];\n        if (node && !NodeManager.nodeExists(node)) {\n            delete this.nodes[key];\n            return undefined;\n        }\n        return node;\n    }\n\n    public getNodes(): StateObjectSelector[] {\n        return Object.keys(this.nodes).map(key => this.getNode(key)).filter(node => node) as StateObjectSelector[];\n    }\n\n    public deleteAllNodes(update: StateBuilder.Root) {\n        for (const node of this.getNodes()) {\n            update.delete(node);\n        }\n        this.nodes = {};\n    }\n\n    public hideAllNodes() {\n        for (const node of this.getNodes()) {\n            setSubtreeVisibility(node.state!, node.ref, true);  // hide\n        }\n    }\n\n    public async showNode(key: string, factory: () => StateObjectSelector | Promise<StateObjectSelector>) {\n        let node = this.getNode(key);\n        if (node) {\n            setSubtreeVisibility(node.state!, node.ref, false);  // show\n        } else {\n            node = await factory();\n            this.nodes[key] = node;\n        }\n        return node;\n    }\n\n}\n\n\n/** Split entry ID (e.g. 'emd-1832') into source ('emdb') and number ('1832') */\nexport function splitEntryId(entryId: string) {\n    const PREFIX_TO_SOURCE: { [prefix: string]: string } = { 'empiar': 'empiar', 'emd': 'emdb', 'idr': 'idr'  };\n    const [prefix, entry] = entryId.split('-');\n    return {\n        source: PREFIX_TO_SOURCE[prefix],\n        entryNumber: entry\n    };\n}\n\n/** Create entry ID (e.g. 'emd-1832') for a combination of source ('emdb') and number ('1832') */\nexport function createEntryId(source: string, entryNumber: string | number) {\n    const SOURCE_TO_PREFIX: { [prefix: string]: string } = { 'empiar': 'empiar', 'emdb': 'emd', 'idr': 'idr' };\n    return `${SOURCE_TO_PREFIX[source]}-${entryNumber}`;\n}\n\n\nexport namespace Debugging {\n    export function logCifOverview(cifData: CifFile, url: string = ''): void {\n        const MAX_VALUES = 10;\n        console.log('CifFile', url);\n        cifData.blocks.forEach(block => {\n            console.log(`    ${block.header}`);\n            block.categoryNames.forEach(catName => {\n                const category = block.categories[catName];\n                const nRows = category.rowCount;\n                console.log(`        _${catName} [${nRows} rows]`);\n                category.fieldNames.forEach(fieldName => {\n                    const field = category.getField(fieldName);\n                    let values = field?.toStringArray().slice(0, MAX_VALUES).join(', ');\n                    if (nRows > MAX_VALUES) values += '...';\n                    console.log(`            .${fieldName}:  ${values}`);\n                });\n            });\n        });\n    }\n\n    export async function testApiV2(plugin: PluginUIContext, api: VolumeApiV2) {\n        const A = 10 ** 5;\n        const BOX: [[number, number, number], [number, number, number]] = [[-A, -A, -A], [A, A, A]];\n        const MAX_VOXELS = 10 ** 7;\n        const urls: { [name: string]: string } = {\n            'VOLUME BOX EMD-1832': api.volumeUrl('emdb', 'emd-1832', BOX, MAX_VOXELS),\n            'LATTICE BOX EMD-1832': api.latticeUrl('emdb', 'emd-1832', 0, BOX, MAX_VOXELS),\n            'VOLUME CELL EMD-1832': api.volumeUrl('emdb', 'emd-1832', null, MAX_VOXELS),\n            'LATTICE CELL EMD-1832': api.latticeUrl('emdb', 'emd-1832', 0, null, MAX_VOXELS),\n            'VOLUME BOX EMPIAR-10070': api.volumeUrl('empiar', 'empiar-10070', BOX, MAX_VOXELS),\n            'VOLUME CELL EMPIAR-10070': api.volumeUrl('empiar', 'empiar-10070', null, MAX_VOXELS),\n            // 'VOLUME CELL EMD-1832': api.volumeUrl('emdb', 'emd-1832', null, MAX_VOXELS),\n            // 'VOLUME CELL EMD-1832 EBI': 'https://www.ebi.ac.uk/pdbe/densities/emd/emd-1832/cell?detail=5',\n            // 'VOLUME CELL EMD-1547': api.volumeUrl('emdb', 'emd-1547', null, MAX_VOXELS),\n            // 'VOLUME CELL EMD-1547 EBI': 'https://www.ebi.ac.uk/pdbe/densities/emd/emd-1547/cell?detail=5',\n            // 'VOLUME CELL EMD-1181': api.volumeUrl('emdb', 'emd-1181', null, MAX_VOXELS),\n            // 'VOLUME CELL EMD-1181 EBI': 'https://www.ebi.ac.uk/pdbe/densities/emd/emd-1181/cell?detail=5',\n        };\n        for (const name in urls) {\n            console.log(`\\n<<< ${name} >>>`);\n            console.log(urls[name]);\n            try {\n                const data = await plugin.builders.data.download({ url: urls[name], isBinary: true });\n                const cif = await plugin.build().to(data).apply(StateTransforms.Data.ParseCif).commit();\n                logCifOverview(cif.data!, urls[name]);\n                await testVolumeBbox(plugin, urls[name], 1.0);\n            } catch (err) {\n                console.error('Failed', err);\n            }\n        }\n    }\n\n    export async function testVolumeBbox(plugin: PluginUIContext, url: string, isoValue: number) {\n        const volumeDataNode = await plugin.builders.data.download({ url: url, isBinary: true });\n        const parsed = await plugin.dataFormats.get('dscif')!.parse(plugin, volumeDataNode, { entryId: url });\n        const volume: StateObjectSelector<PluginStateObject.Volume.Data> = parsed.volumes?.[0] ?? parsed.volume;\n        const volumeData = volume.cell!.obj!.data;\n        const space = volumeData.grid.cells.space;\n        const data = volumeData.grid.cells.data;\n        console.log('testVolumeBbox', url, 'axisOrderSlowToFast:', space.axisOrderSlowToFast, 'dimensions:', space.dimensions);\n        const [nx, ny, nz] = space.dimensions;\n\n        let minX = nx, minY = ny, minZ = nz;\n        let maxX = -1, maxY = -1, maxZ = -1;\n        for (let iz = 0; iz < nz; iz++) {\n            for (let iy = 0; iy < ny; iy++) {\n                for (let ix = 0; ix < nx; ix++) {\n                    // Iterating in ZYX order is faster (probably fewer cache misses)\n                    if (space.get(data, ix, iy, iz) >= isoValue) {\n                        if (ix < minX) minX = ix;\n                        if (iy < minY) minY = iy;\n                        if (iz < minZ) minZ = iz;\n                        if (ix > maxX) maxX = ix;\n                        if (iy > maxY) maxY = iy;\n                        if (iz > maxZ) maxZ = iz;\n                    }\n                }\n            }\n        }\n        console.log(`bbox (value>=${isoValue}):`, [minX, minY, minZ], [maxX + 1, maxY + 1, maxZ + 1], 'size:', [maxX - minX + 1, maxY - minY + 1, maxZ - minZ + 1]);\n    }\n}","import * as MS from './molstar-lib-imports';\n\nimport Schema = MS.Column.Schema\n\n\nconst int = Schema.int;\nconst float = Schema.float;\n\n\n// TODO in future, move to molstar/src/mol-io/reader/cif/schema/mesh.ts\nexport const Mesh_Data_Schema = {\n    mesh: {\n        id: int,\n    },\n    mesh_vertex: {\n        mesh_id: int,\n        vertex_id: int,\n        x: float,\n        y: float,\n        z: float,\n    },\n    /** Table of triangles, 3 rows per triangle */\n    mesh_triangle: {\n        mesh_id: int,\n        /** Indices of vertices within mesh */\n        vertex_id: int,\n    }\n};\nexport type Mesh_Data_Schema = typeof Mesh_Data_Schema;\nexport interface Mesh_Data_Database extends MS.Database<Mesh_Data_Schema> {}\n\n\n// TODO in future, move to molstar/src/mol-io/reader/cif.ts: CIF.schema.mesh\nexport const CIF_schema_mesh = (frame: MS.CifFrame) => MS.toDatabase<Mesh_Data_Schema, Mesh_Data_Database>(Mesh_Data_Schema, frame);\n","/** Helper functions for manipulation with mesh data. */\n\nimport { CIF_schema_mesh } from './mesh-cif-schema';\nimport * as MS from './molstar-lib-imports';\n\n\ntype MeshModificationParams = {\n    scale?: [number, number, number],\n    shift?: [number, number, number],\n    matrix?: MS.Mat4,\n    group?: number,\n    invertSides?: boolean\n};\n\n/** Modify mesh in-place */\nexport function modify(m: MS.Mesh, params: MeshModificationParams) {\n    if (params.scale !== undefined) {\n        const [qx, qy, qz] = params.scale;\n        const vertices = m.vertexBuffer.ref.value;\n        for (let i = 0; i < vertices.length; i += 3) {\n            vertices[i] *= qx;\n            vertices[i + 1] *= qy;\n            vertices[i + 2] *= qz;\n        }\n    }\n    if (params.shift !== undefined) {\n        const [dx, dy, dz] = params.shift;\n        const vertices = m.vertexBuffer.ref.value;\n        for (let i = 0; i < vertices.length; i += 3) {\n            vertices[i] += dx;\n            vertices[i + 1] += dy;\n            vertices[i + 2] += dz;\n        }\n    }\n    if (params.matrix !== undefined) {\n        const r = m.vertexBuffer.ref.value;\n        const matrix = params.matrix;\n        const size = 3 * m.vertexCount;\n        for (let i = 0; i < size; i += 3) {\n            MS.Vec3.transformMat4Offset(r, r, matrix, i, i, 0);\n        }\n    }\n    if (params.group !== undefined) {\n        const groups = m.groupBuffer.ref.value;\n        for (let i = 0; i < groups.length; i++) {\n            groups[i] = params.group;\n        }\n    }\n    if (params.invertSides) {\n        const indices = m.indexBuffer.ref.value;\n        let tmp;\n        for (let i = 0; i < indices.length; i += 3) {\n            tmp = indices[i];\n            indices[i] = indices[i + 1];\n            indices[i + 1] = tmp;\n        }\n        const normals = m.normalBuffer.ref.value;\n        for (let i = 0; i < normals.length; i++) {\n            normals[i] *= -1;\n        }\n    }\n}\n\n/** Create a copy a mesh, possibly modified */\nexport function copy(m: MS.Mesh, modification?: MeshModificationParams): MS.Mesh {\n    const nVertices = m.vertexCount;\n    const nTriangles = m.triangleCount;\n    const vertices = new Float32Array(m.vertexBuffer.ref.value);\n    const indices = new Uint32Array(m.indexBuffer.ref.value);\n    const normals = new Float32Array(m.normalBuffer.ref.value);\n    const groups = new Float32Array(m.groupBuffer.ref.value);\n    const result = MS.Mesh.create(vertices, indices, normals, groups, nVertices, nTriangles);\n    if (modification) {\n        modify(result, modification);\n    }\n    return result;\n}\n\n/** Join more meshes into one */\nexport function concat(...meshes: MS.Mesh[]): MS.Mesh {\n    const nVertices = sum(meshes.map(m => m.vertexCount));\n    const nTriangles = sum(meshes.map(m => m.triangleCount));\n    const vertices = concatArrays(Float32Array, meshes.map(m => m.vertexBuffer.ref.value));\n    const normals = concatArrays(Float32Array, meshes.map(m => m.normalBuffer.ref.value));\n    const groups = concatArrays(Float32Array, meshes.map(m => m.groupBuffer.ref.value));\n    const newIndices = [];\n    let offset = 0;\n    for (const m of meshes) {\n        newIndices.push(m.indexBuffer.ref.value.map(i => i + offset));\n        offset += m.vertexCount;\n    }\n    const indices = concatArrays(Uint32Array, newIndices);\n    return MS.Mesh.create(vertices, indices, normals, groups, nVertices, nTriangles);\n}\n\n/** Return Mesh from CIF data and mesh IDs (group IDs).\n * Assume the CIF contains coords in grid space,\n * transform the output mesh to `space` */\nexport async function meshFromCif(data: MS.CifFile, invertSides: boolean = true, outSpace: 'grid' | 'fractional' | 'cartesian' = 'cartesian'): Promise<{ mesh: MS.Mesh, meshIds: number[] }> {\n    const volumeInfoBlock = data.blocks.find(b => b.header === 'VOLUME_INFO');\n    const meshesBlock = data.blocks.find(b => b.header === 'MESHES');\n    if (!volumeInfoBlock || !meshesBlock) throw new Error('Missing VOLUME_INFO or MESHES block in mesh CIF file');\n    const volumeInfoCif = MS.CIF.schema.densityServer(volumeInfoBlock);\n    const meshCif = CIF_schema_mesh(meshesBlock);\n\n    const nVertices = meshCif.mesh_vertex._rowCount;\n    const nTriangles = Math.floor(meshCif.mesh_triangle._rowCount / 3);\n\n    const mesh_id = meshCif.mesh.id.toArray();\n    const vertex_meshId = meshCif.mesh_vertex.mesh_id.toArray();\n    const x = meshCif.mesh_vertex.x.toArray();\n    const y = meshCif.mesh_vertex.y.toArray();\n    const z = meshCif.mesh_vertex.z.toArray();\n    const triangle_meshId = meshCif.mesh_triangle.mesh_id.toArray();\n    const triangle_vertexId = meshCif.mesh_triangle.vertex_id.toArray();\n\n    // Shift indices from within-mesh indices to overall indices\n    const indices = new Uint32Array(3 * nTriangles);\n    const offsets = offsetMap(vertex_meshId);\n    for (let i = 0; i < 3 * nTriangles; i++) {\n        const offset = offsets.get(triangle_meshId[i])!;\n        indices[i] = offset + triangle_vertexId[i];\n    }\n    const vertices = flattenCoords(x, y, z);\n    const normals = new Float32Array(3 * nVertices);\n    const groups = new Float32Array(vertex_meshId);\n    const mesh = MS.Mesh.create(vertices, indices, normals, groups, nVertices, nTriangles);\n\n    if (invertSides) {\n        modify(mesh, { invertSides: true }); // Vertex orientation convention is opposite in CellStar API and in MolStar\n    }\n\n    if (outSpace === 'cartesian') {\n        const volume = await MS.volumeFromDensityServerData(volumeInfoCif).run();\n        const gridToCartesian = MS.Grid.getGridToCartesianTransform(volume.grid);\n        modify(mesh, { matrix: gridToCartesian });\n    } else if (outSpace === 'fractional') {\n        const gridSize = volumeInfoCif.volume_data_3d_info.sample_count.value(0);\n        const originFract = volumeInfoCif.volume_data_3d_info.origin.value(0);\n        const dimensionFract = volumeInfoCif.volume_data_3d_info.dimensions.value(0);\n        if (dimensionFract[0] !== 1 || dimensionFract[1] !== 1 || dimensionFract[2] !== 1) throw new Error(`Asserted the fractional dimensions are [1,1,1], but are actually [${dimensionFract}]`);\n        const scale: [number, number, number] = [1 / gridSize[0], 1 / gridSize[1], 1 / gridSize[2]];\n        modify(mesh, { scale: scale, shift: Array.from(originFract) as any });\n    }\n\n    MS.Mesh.computeNormals(mesh); // normals only necessary if flatShaded==false\n\n    // const boxMesh = makeMeshFromBox([[0,0,0], [1,1,1]], 1);\n    // const gridSize = volumeInfoCif.volume_data_3d_info.sample_count.value(0); const boxMesh = makeMeshFromBox([[0,0,0], Array.from(gridSize)] as any, 1);\n    // const cellSize = volumeInfoCif.volume_data_3d_info.spacegroup_cell_size.value(0); const boxMesh = makeMeshFromBox([[0, 0, 0], Array.from(cellSize)] as any, 1);\n    // mesh = concat(mesh, boxMesh);  // debug\n    return { mesh: mesh, meshIds: Array.from(mesh_id) };\n}\n\nfunction flattenCoords(x: ArrayLike<number>, y: ArrayLike<number>, z: ArrayLike<number>): Float32Array {\n    const n = x.length;\n    const out = new Float32Array(3 * n);\n    for (let i = 0; i < n; i++) {\n        out[3 * i] = x[i];\n        out[3 * i + 1] = y[i];\n        out[3 * i + 2] = z[i];\n    }\n    return out;\n}\n\n/** Get mapping of unique values to the position of their first occurrence */\nfunction offsetMap(values: ArrayLike<number>) {\n    const result = new Map<number, number>();\n    for (let i = 0; i < values.length; i++) {\n        if (!result.has(values[i])) {\n            result.set(values[i], i);\n        }\n    }\n    return result;\n}\n\n/** Return bounding box */\nexport function bbox(mesh: MS.Mesh): MS.Box3D | null { // Is there no function for this?\n    const nVertices = mesh.vertexCount;\n    const coords = mesh.vertexBuffer.ref.value;\n    if (nVertices === 0) {\n        return null;\n    }\n    let minX = coords[0], minY = coords[1], minZ = coords[2];\n    let maxX = minX, maxY = minY, maxZ = minZ;\n    for (let i = 0; i < 3 * nVertices; i += 3) {\n        const x = coords[i], y = coords[i + 1], z = coords[i + 2];\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (z < minZ) minZ = z;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        if (z > maxZ) maxZ = z;\n    }\n    return MS.Box3D.create(MS.Vec3.create(minX, minY, minZ), MS.Vec3.create(maxX, maxY, maxZ));\n}\n\n/** Example mesh - 1 triangle */\nexport function fakeFakeMesh1(): MS.Mesh {\n    const nVertices = 3;\n    const nTriangles = 1;\n    const vertices = new Float32Array([0, 0, 0, 1, 0, 0, 0, 1, 0]);\n    const indices = new Uint32Array([0, 1, 2]);\n    const normals = new Float32Array([0, 0, 1]);\n    const groups = new Float32Array([0]);\n    return MS.Mesh.create(vertices, indices, normals, groups, nVertices, nTriangles);\n}\n\n/** Example mesh - irregular tetrahedron */\nexport function fakeMesh4(): MS.Mesh {\n    const nVertices = 4;\n    const nTriangles = 4;\n    const vertices = new Float32Array([0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]);\n    const indices = new Uint32Array([0, 2, 1, 0, 1, 3, 1, 2, 3, 2, 0, 3]);\n    const normals = new Float32Array([-1, -1, -1, 1, 0, 0, 0, 1, 0, 0, 0, 1]);\n    const groups = new Float32Array([0, 1, 2, 3]);\n    return MS.Mesh.create(vertices, indices, normals, groups, nVertices, nTriangles);\n}\n\n/** Return a box-shaped mesh */\nexport function meshFromBox(box: [[number, number, number], [number, number, number]], group: number = 0) {\n    const [[x0, y0, z0], [x1, y1, z1]] = box;\n    const vertices = new Float32Array([\n        x0, y0, z0,\n        x1, y0, z0,\n        x0, y1, z0,\n        x1, y1, z0,\n        x0, y0, z1,\n        x1, y0, z1,\n        x0, y1, z1,\n        x1, y1, z1,\n    ]);\n    const indices = new Uint32Array([\n        2, 1, 0, 1, 2, 3,\n        1, 4, 0, 4, 1, 5,\n        3, 5, 1, 5, 3, 7,\n        2, 7, 3, 7, 2, 6,\n        0, 6, 2, 6, 0, 4,\n        4, 7, 6, 7, 4, 5,\n    ]);\n    const groups = new Float32Array([group, group, group, group, group, group, group, group]);\n    const normals = new Float32Array(8);\n    const mesh = MS.Mesh.create(vertices, indices, normals, groups, 8, 12);\n    MS.Mesh.computeNormals(mesh); // normals only necessary if flatShaded==false\n    return mesh;\n}\n\nfunction sum(array: number[]): number {\n    return array.reduce((a, b) => a + b, 0);\n}\n\nfunction concatArrays<T extends MS.TypedArray>(t: new (len: number) => T, arrays: T[]): T {\n    const totalLength = arrays.map(a => a.length).reduce((a, b) => a + b, 0);\n    const result: T = new t(totalLength);\n    let offset = 0;\n    for (const array of arrays) {\n        result.set(array, offset);\n        offset += array.length;\n    }\n    return result;\n}\n\n/** Generate random colors (in a cycle) */\nexport const ColorGenerator = function* () {\n    const colors = shuffleArray(Object.values(MS.ColorNames));\n    let i = 0;\n    while (true) {\n        yield colors[i];\n        i++;\n        if (i >= colors.length) i = 0;\n    }\n}();\nfunction shuffleArray<T>(array: T[]): T[] {\n    // Stealed from https://www.w3docs.com/snippets/javascript/how-to-randomize-shuffle-a-javascript-array.html\n    let curId = array.length;\n    // There remain elements to shuffle\n    while (0 !== curId) {\n        // Pick a remaining element\n        const randId = Math.floor(Math.random() * curId);\n        curId -= 1;\n        // Swap it with the current element.\n        const tmp = array[curId];\n        array[curId] = array[randId];\n        array[randId] = tmp;\n    }\n    return array;\n}\n\n","/** Defines new types of State tree transformers for dealing with mesh data. */\n\nimport * as MS from './molstar-lib-imports';\nimport PD = MS.ParamDefinition;\n\nimport * as MeshUtils from './mesh-utils';\n\n\nexport const CellStarTransform: MS.StateTransformer.Builder.Root = MS.StateTransformer.builderFactory('cellstar');\n\n\n// // // // // // // // // // // // // // // // // // // // // // // //\n// Parsed data\n\n/** Data type for `MeshlistStateObject` - list of meshes */\nexport interface MeshlistData {\n    segmentId: number,\n    segmentName: string,\n    detail: number,\n    meshIds: number[],\n    mesh: MS.Mesh,\n    /** Reference to the object which created this meshlist (e.g. `MeshStreaming.Behavior`) */\n    ownerId?: string,\n}\n\nexport namespace MeshlistData {\n    export function empty(): MeshlistData {\n        return {\n            segmentId: 0,\n            segmentName: 'Empty',\n            detail: 0,\n            meshIds: [],\n            mesh: MS.Mesh.createEmpty(),\n        };\n    };\n    export async function fromCIF(data: MS.CifFile, segmentId: number, segmentName: string, detail: number): Promise<MeshlistData> {\n        const { mesh, meshIds } = await MeshUtils.meshFromCif(data);\n        return {\n            segmentId,\n            segmentName,\n            detail,\n            meshIds,\n            mesh,\n        };\n    }\n    export function stats(meshListData: MeshlistData): string {\n        return `Meshlist \"${meshListData.segmentName}\" (detail ${meshListData.detail}): ${meshListData.meshIds.length} meshes, ${meshListData.mesh.vertexCount} vertices, ${meshListData.mesh.triangleCount} triangles`;\n    }\n    export function getShape(data: MeshlistData, color: MS.Color): MS.Shape<MS.Mesh> {\n        const mesh = data.mesh;\n        const meshShape: MS.Shape<MS.Mesh> = MS.Shape.create('MyShape', data, mesh,\n            () => color,\n            () => 1, (group) => `${data.segmentName} | Segment ${data.segmentId} | Detail ${data.detail} | Mesh ${group}`);\n        return meshShape;\n    }\n\n    export function combineBBoxes(boxes: (MS.Box3D | null)[]): MS.Box3D | null {\n        let result = null;\n        for (const box of boxes) {\n            if (!box) continue;\n            if (result) {\n                MS.Vec3.min(result.min, result.min, box.min);\n                MS.Vec3.max(result.max, result.max, box.max);\n            } else {\n                result = MS.Box3D.zero();\n                MS.Box3D.copy(result, box);\n            }\n        }\n        return result;\n    }\n    export function bbox(data: MeshlistData): MS.Box3D | null {\n        return MeshUtils.bbox(data.mesh);\n    }\n\n    export function allVerticesUsed(data: MeshlistData): boolean {\n        const unusedVertices = new Set();\n        for (let i = 0; i < data.mesh.vertexCount; i++) {\n            unusedVertices.add(i);\n        }\n        for (let i = 0; i < 3 * data.mesh.triangleCount; i++) {\n            const v = data.mesh.vertexBuffer.ref.value[i];\n            unusedVertices.delete(v);\n        }\n        return unusedVertices.size === 0;\n    }\n}\n\n\n\n// // // // // // // // // // // // // // // // // // // // // // // //\n// Raw Data -> Parsed data\n\nexport class MeshlistStateObject extends MS.PluginStateObject.Create<MeshlistData>({ name: 'Parsed Meshlist', typeClass: 'Object' }) { }\n// QUESTION: is typeClass just for color, or does do something?\n\nexport const ParseMeshlistTransformer = CellStarTransform({\n    name: 'meshlist-from-string',\n    from: MS.PluginStateObject.Format.Cif,\n    to: MeshlistStateObject,\n    params: {\n        label: PD.Text(MeshlistStateObject.type.name, { isHidden: true }), // QUESTION: Is this the right way to pass a value to apply() without exposing it in GUI?\n        segmentId: PD.Numeric(1, {}, { isHidden: true }),\n        segmentName: PD.Text('Segment'),\n        detail: PD.Numeric(1, {}, { isHidden: true }),\n    }\n})({\n    apply({ a, params }, globalCtx) { // `a` is the parent node, params are 2nd argument to To.apply(), `globalCtx` is the plugin\n        return MS.Task.create('Create Parsed Meshlist', async ctx => {\n            const meshlistData = await MeshlistData.fromCIF(a.data, params.segmentId, params.segmentName, params.detail);\n            const es = meshlistData.meshIds.length === 1 ? '' : 'es';\n            return new MeshlistStateObject(meshlistData, { label: params.label, description: `${meshlistData.segmentName} (${meshlistData.meshIds.length} mesh${es})` });\n        });\n    }\n});\n\n\n// // // // // // // // // // // // // // // // // // // // // // // //\n// Parsed data -> Shape\n\n/** Data type for PluginStateObject.Shape.Provider */\ntype MeshShapeProvider = MS.ShapeProvider<MeshlistData, MS.Mesh, MS.Mesh.Params>;\nnamespace MeshShapeProvider {\n    export function fromMeshlistData(meshlist: MeshlistData, color?: MS.Color): MeshShapeProvider {\n        const theColor = color ?? MeshUtils.ColorGenerator.next().value;\n        return {\n            label: 'Mesh',\n            data: meshlist,\n            params: meshParamDef, // TODO how to pass the real params correctly?\n            geometryUtils: MS.Mesh.Utils,\n            getShape: (ctx, data: MeshlistData) => MeshlistData.getShape(data, theColor),\n        };\n    }\n}\n\n/** Params for MeshShapeTransformer */\nconst meshShapeParamDef = {\n    color: PD.Value<MS.Color | undefined>(undefined), // undefined means random color\n};\n\nconst meshParamDef: MS.Mesh.Params = {\n    // These are basically original MS.Mesh.Params:\n    // BaseGeometry.Params\n    alpha: PD.Numeric(1, { min: 0, max: 1, step: 0.01 }, { label: 'Opacity', isEssential: true, description: 'How opaque/transparent the representation is rendered.' }),\n    quality: PD.Select<MS.VisualQuality>('auto', MS.VisualQualityOptions, { isEssential: true, description: 'Visual/rendering quality of the representation.' }),\n    material: MS.Material.getParam(),\n    clip: MS.Mesh.Params.clip, // PD.Group(MS.Clip.Params),\n    instanceGranularity: PD.Boolean(false, { description: 'Use instance granularity for marker, transparency, clipping, overpaint, substance data to save memory.' }),\n    // Mesh.Params\n    doubleSided: PD.Boolean(false, MS.BaseGeometry.CustomQualityParamInfo),\n    flipSided: PD.Boolean(false, MS.BaseGeometry.ShadingCategory),\n    flatShaded: PD.Boolean(true, MS.BaseGeometry.ShadingCategory), // CHANGED, default: false (set true to see the real mesh vertices and triangles)\n    ignoreLight: PD.Boolean(false, MS.BaseGeometry.ShadingCategory),\n    xrayShaded: PD.Boolean(false, MS.BaseGeometry.ShadingCategory), // this is like better opacity (angle-dependent), nice\n    transparentBackfaces: PD.Select('off', PD.arrayToOptions(['off', 'on', 'opaque']), MS.BaseGeometry.ShadingCategory),\n    bumpFrequency: PD.Numeric(0, { min: 0, max: 10, step: 0.1 }, MS.BaseGeometry.ShadingCategory),\n    bumpAmplitude: PD.Numeric(1, { min: 0, max: 5, step: 0.1 }, MS.BaseGeometry.ShadingCategory),\n    // TODO when I change values here, it has effect, but not if I change them in GUI\n};\n\nexport const MeshShapeTransformer = CellStarTransform({\n    name: 'shape-from-meshlist',\n    display: { name: 'Shape from Meshlist', description: 'Create Shape from Meshlist data' },\n    from: MeshlistStateObject,\n    to: MS.PluginStateObject.Shape.Provider,\n    params: meshShapeParamDef\n})({\n    apply({ a, params }) {\n        // you can look for example at ShapeFromPly in mol-plugin-state/tansforms/model.ts as an example\n        const shapeProvider = MeshShapeProvider.fromMeshlistData(a.data, params.color);\n        return new MS.PluginStateObject.Shape.Provider(shapeProvider, { label: MS.PluginStateObject.Shape.Provider.type.name, description: a.description });\n    }\n});\n\n\n// // // // // // // // // // // // // // // // // // // // // // // //\n// Shape -> Repr\n\n// type MeshRepr = MS.PluginStateObject.Representation3DData<MS.ShapeRepresentation<MS.ShapeProvider<any,any,any>, MS.Mesh, MS.Mesh.Params>, any>;\n\n// export const CustomMeshReprTransformer = CellStarTransform({\n//     name: 'custom-repr',\n//     from: MS.PluginStateObject.Shape.Provider, // later we can change this\n//     to: MS.PluginStateObject.Shape.Representation3D,\n// })({\n//     apply({ a }, globalCtx) {\n//         const repr: MeshRepr = createRepr(a.data); // TODO implement createRepr\n//         // have a look at MS.StateTransforms.Representation.ShapeRepresentation3D if you want to try implementing yourself\n//         return new MS.PluginStateObject.Shape.Representation3D(repr)\n//     },\n// })\n\n// export async function createMeshRepr(plugin: MS.PluginContext, data: any) {\n//     await plugin.build()\n//         .toRoot()\n//         .apply(CreateMyShapeTransformer, { data })\n//         .apply(MS.StateTransforms.Representation.ShapeRepresentation3D) // this should work\n//         // or .apply(CustomMeshRepr)\n//         .commit();\n// }\n\n// export function createRepr(reprData: MS.ShapeProvider<any,any,any>): MeshRepr {\n//     throw new Error('NotImplemented');\n//     return {} as MeshRepr;\n// }\n","import { ParamDefinition as PD } from './molstar-lib-imports';\n\n\n/**\n * Represents a set of values to choose from, with a default value. Example:\n * ```\n * export const MyChoice = new Choice({ yes: 'I agree', no: 'Nope' }, 'yes');\n * export type MyChoiceType = Choice.Values<typeof MyChoice>; // 'yes'|'no'\n * ```\n */\nexport class Choice<T extends string, D extends T> {\n    readonly defaultValue: D;\n    readonly options: [T, string][];\n    private readonly nameDict: { [value in T]: string };\n    constructor(opts: { [value in T]: string }, defaultValue: D) {\n        this.defaultValue = defaultValue;\n        this.options = Object.keys(opts).map(k => [k as T, opts[k as T]]);\n        this.nameDict = opts;\n    }\n    PDSelect(defaultValue?: T, info?: PD.Info): PD.Select<T> {\n        return PD.Select<T>(defaultValue ?? this.defaultValue, this.options, info);\n    }\n    prettyName(value: T): string {\n        return this.nameDict[value];\n    }\n}\nexport namespace Choice {\n    export type Values<T extends Choice<any, any>> = T extends Choice<infer R, any> ? R : any;\n}\n","\nimport * as MS from '../molstar-lib-imports';\nimport PD = MS.ParamDefinition;\n\nimport { Choice } from '../choice';\n\n\nexport const DEFAULT_MESH_SERVER = 'http://localhost:9000/v2';\n\n\nexport class MeshServerInfo extends MS.PluginStateObject.Create<MeshServerInfo.Data>({ name: 'Volume Server', typeClass: 'Object' }) { }\n\nexport namespace MeshServerInfo {\n    export const MeshSourceChoice = new Choice({ empiar: 'EMPIAR', emdb: 'EMDB' }, 'empiar');\n    export type MeshSource = Choice.Values<typeof MeshSourceChoice>;\n\n    export const Params = {\n        serverUrl: PD.Text(DEFAULT_MESH_SERVER),\n        source: MeshSourceChoice.PDSelect(),\n        entryId: PD.Text(''),\n    };\n    export type Data = PD.Values<typeof Params>;\n}\n","import * as MS from './molstar-lib-imports';\n\n\n// TODO unify with Metadata in CellStar\n\nexport interface Metadata {\n    grid: {\n        general: {\n            details: string,\n        },\n        volumes: Volumes,\n        segmentation_lattices: SegmentationLattices,\n        segmentation_meshes: SegmentationMeshes,\n    },\n    annotation: Annotation,\n}\n\nexport interface Volumes {\n    volume_downsamplings: number[],\n    voxel_size: { [downsampling: number]: Vector3 },\n    origin: Vector3,\n    grid_dimensions: Vector3,\n    sampled_grid_dimensions: { [downsampling: number]: Vector3 },\n    mean: { [downsampling: number]: number },\n    std: { [downsampling: number]: number },\n    min: { [downsampling: number]: number },\n    max: { [downsampling: number]: number },\n    volume_force_dtype: string,\n}\n\nexport interface SegmentationLattices {\n    segmentation_lattice_ids: number[],\n    segmentation_downsamplings: { [lattice: number]: number[] },\n}\n\nexport interface Annotation {\n    name: string,\n    details: string,\n    segment_list: Segment[],\n}\n\nexport interface Segment {\n    id: number,\n    colour: number[],\n    biological_annotation: BiologicalAnnotation,\n}\n\nexport interface BiologicalAnnotation {\n    name: string,\n    external_references: { id: number, resource: string, accession: string, label: string, description: string }[]\n}\n\nexport interface SegmentationMeshes {\n    mesh_component_numbers: {\n        segment_ids?: {\n            [segId: number]: {\n                detail_lvls: {\n                    [detail: number]: {\n                        mesh_ids: {\n                            [meshId: number]: {\n                                num_triangles: number,\n                                num_vertices: number\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    detail_lvl_to_fraction: {\n        [lvl: number]: number\n    }\n}\n\ntype Vector3 = [number, number, number];\n\n\n\nexport namespace Metadata {\n    export function meshSegments(metadata: Metadata): number[] {\n        const segmentIds = metadata.grid.segmentation_meshes.mesh_component_numbers.segment_ids;\n        if (segmentIds === undefined) return [];\n        return Object.keys(segmentIds).map(s => parseInt(s));\n    }\n    export function meshSegmentDetails(metadata: Metadata, segmentId: number): number[] {\n        const segmentIds = metadata.grid.segmentation_meshes.mesh_component_numbers.segment_ids;\n        if (segmentIds === undefined) return [];\n        const details = segmentIds[segmentId].detail_lvls;\n        return Object.keys(details).map(s => parseInt(s));\n    }\n    /** Get the worst available detail level that is not worse than preferredDetail.\n     * If preferredDetail is null, get the worst detail level overall.\n     * (worse = greater number) */\n    export function getSufficientDetail(metadata: Metadata, segmentId: number, preferredDetail: number | null) {\n        let availDetails = meshSegmentDetails(metadata, segmentId);\n        if (preferredDetail !== null) {\n            availDetails = availDetails.filter(det => det <= preferredDetail);\n        }\n        return Math.max(...availDetails);\n    }\n    export function annotationsBySegment(metadata: Metadata): { [id: number]: Segment } {\n        const result: { [id: number]: Segment } = {};\n        for (const segment of metadata.annotation.segment_list) {\n            if (segment.id in result) {\n                throw new Error(`Duplicate segment annotation for segment ${segment.id}`);\n            }\n            result[segment.id] = segment;\n        }\n        return result;\n    }\n    export function dropSegments(metadata: Metadata, segments: number[]): void {\n        if (metadata.grid.segmentation_meshes.mesh_component_numbers.segment_ids === undefined) return;\n        const dropSet = new Set(segments);\n        metadata.annotation.segment_list = metadata.annotation.segment_list.filter(seg => !dropSet.has(seg.id));\n        for (const seg of segments) {\n            delete metadata.grid.segmentation_meshes.mesh_component_numbers.segment_ids[seg];\n        }\n    }\n    export function namesAndColorsBySegment(metadata: Metadata) {\n        const result: { [id: number]: { name: string, color: MS.Color } } = {};\n        for (const segment of metadata.annotation.segment_list) {\n            if (segment.id in result) throw new Error(`Duplicate segment annotation for segment ${segment.id}`);\n            result[segment.id] = { name: segment.biological_annotation.name, color: MS.Color.fromNormalizedArray(segment.colour, 0) };\n        }\n        return result;\n\n    }\n}","import { map, distinctUntilChanged } from 'rxjs';\n\nimport * as MS from '../molstar-lib-imports';\nimport PD = MS.ParamDefinition;\n\nimport { Choice } from '../choice';\nimport { MeshlistData } from '../mesh-extension';\nimport { Metadata } from '../metadata';\nimport { MeshServerInfo } from './server-info';\n\n\nconst DEFAULT_SEGMENT_NAME = 'Untitled segment';\nconst DEFAULT_SEGMENT_COLOR = MS.ColorNames.lightgray;\nexport const NO_SEGMENT = -1;\n/** Maximum (worst) detail level available in GUI (TODO set actual maximum possible value) */\nconst MAX_DETAIL = 10;\nconst DEFAULT_DETAIL = 7;  // TODO decide a reasonable default\n/** Segments whose bounding box volume is above this value (relative to the overall bounding box) are considered as background segments */\nconst BACKGROUND_SEGMENT_VOLUME_THRESHOLD = 0.5;\n// const DEBUG_IGNORED_SEGMENTS = new Set([13, 15]); // TODO remove\nconst DEBUG_IGNORED_SEGMENTS = new Set(); // TODO remove\n\n\nexport class MeshStreaming extends MS.PluginStateObject.CreateBehavior<MeshStreaming.Behavior>({ name: 'Mesh Streaming' }) { }\n\nexport namespace MeshStreaming {\n\n    export namespace Params {\n        export const ViewTypeChoice = new Choice({ off: 'Off', select: 'Select', all: 'All' }, 'select'); // TODO add camera target?\n        export type ViewType = Choice.Values<typeof ViewTypeChoice>;\n\n        export function create(options: MeshServerInfo.Data) {\n            return {\n                view: PD.MappedStatic('select', {\n                    'off': PD.Group({}),\n                    'select': PD.Group({\n                        baseDetail: PD.Numeric(DEFAULT_DETAIL, { min: 1, max: MAX_DETAIL, step: 1 }, { description: 'Detail level for the non-selected segments (lower number = better)' }),\n                        focusDetail: PD.Numeric(1, { min: 1, max: MAX_DETAIL, step: 1 }, { description: 'Detail level for the selected segment (lower number = better)' }),\n                        selectedSegment: PD.Numeric(NO_SEGMENT, {}, { isHidden: true }),\n                    }, { isFlat: true }),\n                    'all': PD.Group({\n                        detail: PD.Numeric(DEFAULT_DETAIL, { min: 1, max: MAX_DETAIL, step: 1 }, { description: 'Detail level for all segments (lower number = better)' })\n                    }, { isFlat: true }),\n                }, { description: '\"Off\" hides all segments. \\n\"Select\" shows all segments in lower detail, clicked segment in better detail. \"All\" shows all segment in the same level.' }),\n            };\n        }\n\n        export type Definition = ReturnType<typeof create>\n        export type Values = PD.Values<Definition>\n\n        export function copyValues(params: Values): Values {\n            return {\n                view: {\n                    name: params.view.name,\n                    params: { ...params.view.params } as any,\n                }\n            };\n        }\n        export function valuesEqual(p: Values, q: Values): boolean {\n            if (p.view.name !== q.view.name) return false;\n            for (const key in p.view.params) {\n                if ((p.view.params as any)[key] !== (q.view.params as any)[key]) return false;\n            }\n            return true;\n        }\n        export function detailsEqual(p: Values, q: Values): boolean {\n            switch (p.view.name) {\n                case 'off':\n                    return q.view.name === 'off';\n                case 'select':\n                    return q.view.name === 'select' && p.view.params.baseDetail === q.view.params.baseDetail && p.view.params.focusDetail === q.view.params.focusDetail;\n                case 'all':\n                    return q.view.name === 'all' && p.view.params.detail === q.view.params.detail;\n                default:\n                    throw new Error('Not implemented');\n            }\n        }\n    }\n\n    export interface VisualInfo {\n        tag: string, // e.g. high-2, low-1 // ? remove if can be omitted\n        segmentId: number, // ? remove if unused\n        segmentName: string, // ? remove if unused\n        detailType: VisualInfo.DetailType, // ? remove if unused\n        detail: number, // ? remove if unused\n        color: MS.Color, // move to MeshlistData?\n        visible: boolean,\n        data?: MeshlistData,\n    }\n    export namespace VisualInfo {\n        export type DetailType = 'low' | 'high';\n        export const DetailTypes: DetailType[] = ['low', 'high'];\n        export function tagFor(segmentId: number, detail: DetailType) {\n            return `${detail}-${segmentId}`;\n        }\n    }\n\n\n    export class Behavior extends MS.PluginBehavior.WithSubscribers<Params.Values> {\n        private id: string;\n        private ref: string = '';\n        public parentData: MeshServerInfo.Data;\n        private metadata?: Metadata;\n        public visuals?: { [tag: string]: VisualInfo };\n        public backgroundSegments: { [segmentId: number]: boolean } = {};\n        private focusObservable = this.plugin.behaviors.interaction.click.pipe( // QUESTION is this OK way to get focused segment?\n            map(evt => evt.current.loci),\n            map(loci => (loci.kind === 'group-loci') ? loci.shape.sourceData as MeshlistData : null),\n            map(data => (data?.ownerId === this.id) ? data : null), // do not process shapes created by others\n            distinctUntilChanged((old, current) => old?.segmentId === current?.segmentId),\n        );\n        private focusSubscription?: MS.PluginCommand.Subscription = undefined;\n        private backgroundSegmentsInitialized = false;\n\n        constructor(plugin: MS.PluginContext, data: MeshServerInfo.Data, params: Params.Values) {\n            super(plugin, params);\n            this.id = MS.UUID.create22();\n            this.parentData = data;\n        }\n\n        register(ref: string): void {\n            this.ref = ref;\n        }\n\n        unregister(): void {\n            if (this.focusSubscription) {\n                this.focusSubscription.unsubscribe();\n                this.focusSubscription = undefined;\n            }\n            // TODO empty cache here (if used)\n        }\n\n        selectSegment(segmentId: number) {\n            if (this.params.view.name === 'select') {\n                if (this.params.view.params.selectedSegment === segmentId) return;\n                const newParams = Params.copyValues(this.params);\n                if (newParams.view.name === 'select') {\n                    newParams.view.params.selectedSegment = segmentId;\n                }\n                const state = this.plugin.state.data;\n                const update = state.build().to(this.ref).update(newParams);\n                MS.PluginCommands.State.Update(this.plugin, { state, tree: update, options: { doNotUpdateCurrent: true } });\n            }\n        }\n\n        async update(params: Params.Values) {\n            const oldParams = this.params;\n            this.params = params;\n\n            if (!this.metadata) {\n                const response = await fetch(this.getMetadataUrl());\n                this.metadata = await response.json();\n            }\n\n            if (!this.visuals) {\n                this.initVisualInfos();\n            } else if (!Params.detailsEqual(this.params, oldParams)) {\n                this.updateVisualInfoDetails();\n            }\n\n            switch (params.view.name) {\n                case 'off':\n                    await this.disableVisuals();\n                    break;\n                case 'select':\n                    await this.enableVisuals(params.view.params.selectedSegment);\n                    break;\n                case 'all':\n                    await this.enableVisuals();\n                    break;\n                default:\n                    throw new Error('Not implemented');\n            }\n            if (params.view.name !== 'off' && !this.backgroundSegmentsInitialized) {\n                this.guessBackgroundSegments();\n                this.backgroundSegmentsInitialized = true;\n            }\n            if (params.view.name === 'select' && !this.focusSubscription) {\n                this.focusSubscription = this.subscribeObservable(this.focusObservable, data => { this.selectSegment(data?.segmentId ?? NO_SEGMENT); });\n            } else if (params.view.name !== 'select' && this.focusSubscription) {\n                this.focusSubscription.unsubscribe();\n                this.focusSubscription = undefined;\n            }\n            return true;\n        }\n\n        private getMetadataUrl() {\n            return `${this.parentData.serverUrl}/${this.parentData.source}/${this.parentData.entryId}/metadata`;\n        }\n\n        private getMeshUrl(segment: number, detail: number) {\n            return `${this.parentData.serverUrl}/${this.parentData.source}/${this.parentData.entryId}/mesh_bcif/${segment}/${detail}`;\n        }\n\n        private initVisualInfos() {\n            const namesAndColors = Metadata.namesAndColorsBySegment(this.metadata!);\n\n            const visuals: { [tag: string]: VisualInfo } = {};\n            for (const segid of Metadata.meshSegments(this.metadata!)) {\n                if (DEBUG_IGNORED_SEGMENTS.has(segid)) continue;\n                const name = namesAndColors[segid]?.name ?? DEFAULT_SEGMENT_NAME;\n                const color = namesAndColors[segid]?.color ?? DEFAULT_SEGMENT_COLOR;\n                for (const detailType of VisualInfo.DetailTypes) {\n                    const visual: VisualInfo = {\n                        tag: VisualInfo.tagFor(segid, detailType),\n                        segmentId: segid,\n                        segmentName: name,\n                        detailType: detailType,\n                        detail: -1, // to be set at the end\n                        color: color,\n                        visible: false,\n                        data: undefined,\n                    };\n                    visuals[visual.tag] = visual;\n                }\n            }\n            this.visuals = visuals;\n            this.updateVisualInfoDetails();\n        }\n        private updateVisualInfoDetails() {\n            let highDetail: number | undefined;\n            let lowDetail: number | undefined;\n            switch (this.params.view.name) {\n                case 'off':\n                    lowDetail = undefined;\n                    highDetail = undefined;\n                    break;\n                case 'select':\n                    lowDetail = this.params.view.params.baseDetail;\n                    highDetail = this.params.view.params.focusDetail;\n                    break;\n                case 'all':\n                    lowDetail = this.params.view.params.detail;\n                    highDetail = undefined;\n                    break;\n            }\n            for (const tag in this.visuals) {\n                const visual = this.visuals[tag];\n                const preferredDetail = (visual.detailType === 'high') ? highDetail : lowDetail;\n                if (preferredDetail !== undefined) {\n                    visual.detail = Metadata.getSufficientDetail(this.metadata!, visual.segmentId, preferredDetail);\n                }\n            }\n        }\n\n        private async enableVisuals(highDetailSegment?: number) {\n            for (const tag in this.visuals) {\n                const visual = this.visuals[tag];\n                const requiredDetailType = visual.segmentId === highDetailSegment ? 'high' : 'low';\n                if (visual.detailType === requiredDetailType) {\n                    visual.data = await this.getMeshData(visual);\n                    visual.visible = true;\n                } else {\n                    visual.visible = false;\n                }\n            }\n        }\n\n        private async disableVisuals() {\n            for (const tag in this.visuals) {\n                const visual = this.visuals[tag];\n                visual.visible = false;\n            }\n        }\n\n        /** Fetch data in current `visual.detail`, or return already fetched data (if available in the correct detail). */\n        private async getMeshData(visual: VisualInfo): Promise<MeshlistData> {\n            if (visual.data && visual.data.detail === visual.detail) {\n                // Do not recreate\n                return visual.data;\n            }\n            // TODO cache\n            const url = this.getMeshUrl(visual.segmentId, visual.detail);\n            const urlAsset = MS.Asset.getUrlAsset(this.plugin.managers.asset, url);\n            const asset = await this.plugin.runTask(this.plugin.managers.asset.resolve(urlAsset, 'binary'));\n            const parsed = await this.plugin.runTask(MS.CIF.parseBinary(asset.data));\n            if (parsed.isError) {\n                throw new Error(`Failed parsing CIF file from ${url}`);\n            }\n            const meshlistData = await MeshlistData.fromCIF(parsed.result, visual.segmentId, visual.segmentName, visual.detail);\n            meshlistData.ownerId = this.id;\n            // const bbox = MeshlistData.bbox(meshlistData);\n            // const bboxVolume = bbox ? MS.Box3D.volume(bbox) : 0.0;\n            // console.log(`BBox ${visual.segmentId}: ${Math.round(bboxVolume! / 1e6)} M`, bbox); // DEBUG\n            return meshlistData;\n        }\n\n        private async guessBackgroundSegments() {\n            const bboxes: { [segid: number]: MS.Box3D } = {};\n            for (const tag in this.visuals) {\n                const visual = this.visuals[tag];\n                if (visual.detailType === 'low' && visual.data) {\n                    const bbox = MeshlistData.bbox(visual.data);\n                    if (bbox) {\n                        bboxes[visual.segmentId] = bbox;\n                    }\n                }\n            }\n            const totalBbox = MeshlistData.combineBBoxes(Object.values(bboxes));\n            const totalVolume = totalBbox ? MS.Box3D.volume(totalBbox) : 0.0;\n            // console.log(`BBox total: ${Math.round(totalVolume! / 1e6)} M`, totalBbox); // DEBUG\n\n            const isBgSegment: { [segid: number]: boolean } = {};\n            for (const segid in bboxes) {\n                const bbox = bboxes[segid];\n                const bboxVolume = MS.Box3D.volume(bbox);\n                isBgSegment[segid] = (bboxVolume > totalVolume * BACKGROUND_SEGMENT_VOLUME_THRESHOLD);\n                // console.log(`BBox ${segid}: ${Math.round(bboxVolume! / 1e6)} M, ${bboxVolume / totalVolume}`, bbox); // DEBUG\n            }\n            this.backgroundSegments = isBgSegment;\n        }\n\n        getDescription() {\n            return Params.ViewTypeChoice.prettyName(this.params.view.name);\n        }\n\n    }\n}\n\n","import * as MS from '../molstar-lib-imports';\nimport PD = MS.ParamDefinition;\n\nimport { CellStarTransform, MeshlistData } from '../mesh-extension';\nimport { MeshServerInfo } from './server-info';\nimport { MeshStreaming, NO_SEGMENT } from './behavior';\n\n\nconst BACKGROUND_OPACITY = 0.2;\nconst FOREROUND_OPACITY = 1;\n\n\n// // // // // // // // // // // // // // // // // // // // // // // //\n\nexport const MeshServerTransformer = CellStarTransform({\n    name: 'mesh-server-info',\n    from: MS.PluginStateObject.Root,\n    to: MeshServerInfo,\n    params: MeshServerInfo.Params,\n})({\n    apply({ a, params }, plugin: MS.PluginContext) { // `a` is the parent node, `params` are 2nd argument to To.apply()\n        params.serverUrl = params.serverUrl.replace(/\\/*$/, '');  // trim trailing slash\n        const description: string = params.entryId;\n        return new MeshServerInfo({ ...params }, { label: 'Mesh Server', description: description });\n    }\n});\n\n// // // // // // // // // // // // // // // // // // // // // // // //\n\nexport const MeshStreamingTransformer = CellStarTransform({\n    name: 'mesh-streaming-from-server-info',\n    display: { name: 'Mesh Streaming' },\n    from: MeshServerInfo,\n    to: MeshStreaming,\n    params: a => MeshStreaming.Params.create(a!.data),\n})({\n    canAutoUpdate() { return true; },\n    apply({ a, params }, plugin: MS.PluginContext) {\n        return MS.Task.create('Mesh Streaming', async ctx => {\n            const behavior = new MeshStreaming.Behavior(plugin, a.data, params);\n            await behavior.update(params);\n            return new MeshStreaming(behavior, { label: 'Mesh Streaming', description: behavior.getDescription() });\n        });\n    },\n    update({ a, b, oldParams, newParams }) {\n        return MS.Task.create('Update Mesh Streaming', async ctx => {\n            if (a.data.source !== b.data.parentData.source || a.data.entryId !== b.data.parentData.entryId){\n                return MS.StateTransformer.UpdateResult.Recreate;\n            }\n            b.data.parentData = a.data;\n            await b.data.update(newParams);\n            b.description = b.data.getDescription();\n            return MS.StateTransformer.UpdateResult.Updated;\n        });\n    }\n});\n\n// // // // // // // // // // // // // // // // // // // // // // // //\n\ninterface MeshVisualGroupData {\n    opacity: number,\n}\n\n// export type MeshVisualGroupTransformer = typeof MeshVisualGroupTransformer;\nexport const MeshVisualGroupTransformer = CellStarTransform({\n    name: 'mesh-visual-group-from-streaming',\n    display: { name: 'Mesh Visuals for a Segment' },\n    from: MeshStreaming,\n    to: MS.PluginStateObject.Group,\n    params: {\n        /** Shown on the node in GUI */\n        label: PD.Text('', { isHidden: true }),\n        /** Shown on the node in GUI (gray letters) */\n        description: PD.Text(''),\n        segmentId: PD.Numeric(NO_SEGMENT, {}, { isHidden: true }),\n        opacity: PD.Numeric(-1, { min: 0, max: 1, step: 0.01 }),\n    }\n})({\n    apply({ a, params }, plugin) {\n        trySetAutoOpacity(params, a);\n        return new MS.PluginStateObject.Group({ opacity: params.opacity }, params);\n    },\n    update({ a, b, oldParams, newParams }, plugin) {\n        if (MS.shallowEqualObjects(oldParams, newParams)) {\n            return MS.StateTransformer.UpdateResult.Unchanged;\n        }\n        newParams.label ||= oldParams.label; // Protect against resetting params to invalid defaults\n        if (newParams.segmentId === NO_SEGMENT) newParams.segmentId = oldParams.segmentId; // Protect against resetting params to invalid defaults\n        trySetAutoOpacity(newParams, a);\n        b.label = newParams.label;\n        b.description = newParams.description;\n        (b.data as MeshVisualGroupData).opacity = newParams.opacity;\n        return MS.StateTransformer.UpdateResult.Updated;\n    },\n    canAutoUpdate({ oldParams, newParams }, plugin) {\n        return newParams.description === oldParams.description;\n    },\n});\n\nfunction trySetAutoOpacity(params: MS.StateTransformer.Params<typeof MeshVisualGroupTransformer>, parent: MeshStreaming) {\n    if (params.opacity === -1) {\n        const isBgSegment = parent.data.backgroundSegments[params.segmentId];\n        if (isBgSegment !== undefined) {\n            params.opacity = isBgSegment ? BACKGROUND_OPACITY : FOREROUND_OPACITY;\n        }\n    }\n}\n\n\n// // // // // // // // // // // // // // // // // // // // // // // //\n\nexport const MeshVisualTransformer = CellStarTransform({\n    name: 'mesh-visual-from-streaming',\n    display: { name: 'Mesh Visual from Streaming' },\n    from: MeshStreaming,\n    to: MS.PluginStateObject.Shape.Representation3D,\n    params: {\n        /** Must be set to PluginStateObject reference to self */\n        ref: PD.Text('', { isHidden: true, isEssential: true }), // QUESTION what is isEssential\n        /** Identification of the mesh visual, e.g. 'low-2' */\n        tag: PD.Text('', { isHidden: true, isEssential: true }),\n        /** Opacity of the visual (not to be set directly, but controlled by the opacity of the parent Group, and by VisualInfo.visible) */\n        opacity: PD.Numeric(-1, { min: 0, max: 1, step: 0.01 }, { isHidden: true }),\n    }\n})({\n    apply({ a, params, spine }, plugin: MS.PluginContext) {\n        return MS.Task.create('Mesh Visual', async ctx => {\n            const visualInfo: MeshStreaming.VisualInfo = a.data.visuals![params.tag];\n            if (!visualInfo) throw new Error(`VisualInfo with tag '${params.tag}' is missing.`);\n            const groupData = spine.getAncestorOfType(MS.PluginStateObject.Group)?.data as MeshVisualGroupData | undefined;\n            params.opacity = visualInfo.visible ? (groupData?.opacity ?? FOREROUND_OPACITY) : 0.0;\n            const props = PD.getDefaultValues(MS.Mesh.Params);\n            props.flatShaded = true; // `flatShaded: true` is to see the real mesh vertices and triangles (default: false)\n            props.alpha = params.opacity;\n            const repr = MS.ShapeRepresentation((ctx, meshlist: MeshlistData) => MeshlistData.getShape(meshlist, visualInfo.color), MS.Mesh.Utils);\n            await repr.createOrUpdate(props, visualInfo.data ?? MeshlistData.empty()).runInContext(ctx);\n            return new MS.PluginStateObject.Shape.Representation3D({ repr, sourceData: visualInfo.data }, { label: 'Mesh Visual', description: params.tag });\n        });\n    },\n    update({ a, b, oldParams, newParams, spine }, plugin: MS.PluginContext) {\n        return MS.Task.create('Update Mesh Visual', async ctx => {\n            newParams.ref ||= oldParams.ref; // Protect against resetting params to invalid defaults\n            newParams.tag ||= oldParams.tag; // Protect against resetting params to invalid defaults\n            const visualInfo: MeshStreaming.VisualInfo = a.data.visuals![newParams.tag];\n            if (!visualInfo) throw new Error(`VisualInfo with tag '${newParams.tag}' is missing.`);\n            const oldData = b.data.sourceData as MeshlistData | undefined;\n            if (visualInfo.data?.detail !== oldData?.detail) {\n                return MS.StateTransformer.UpdateResult.Recreate;\n            }\n            const groupData = spine.getAncestorOfType(MS.PluginStateObject.Group)?.data as MeshVisualGroupData | undefined;\n            const newOpacity = visualInfo.visible ? (groupData?.opacity ?? FOREROUND_OPACITY) : 0.0; // do not store to newParams directly, because oldParams and newParams might point to the same object!\n            if (newOpacity !== oldParams.opacity) {\n                newParams.opacity = newOpacity;\n                await b.data.repr.createOrUpdate({ alpha: newParams.opacity }).runInContext(ctx);\n                return MS.StateTransformer.UpdateResult.Updated;\n            } else {\n                return MS.StateTransformer.UpdateResult.Unchanged;\n            }\n        });\n    },\n    canAutoUpdate(params, globalCtx) {\n        return true;\n    },\n    dispose({ b, params }, plugin) {\n        b?.data.repr.destroy(); // QUESTION is this correct?\n    },\n});\n\n// // // // // // // // // // // // // // // // // // // // // // // //\n\nexport const InitMeshStreaming = MS.StateAction.build({\n    display: { name: 'Mesh Streaming' },\n    from: MS.PluginStateObject.Root,\n    params: MeshServerInfo.Params,\n    isApplicable: (a, _, plugin: MS.PluginContext) => true\n})(function (p, plugin: MS.PluginContext) {\n    return MS.Task.create('Mesh Streaming', async ctx => {\n        const { params } = p;\n        // p.ref\n        const serverNode = await plugin.build().to(p.ref).apply(MeshServerTransformer, params).commit();\n        // const serverNode = await plugin.build().toRoot().apply(MeshServerTransformer, params).commit();\n        const streamingNode = await plugin.build().to(serverNode).apply(MeshStreamingTransformer, {}).commit();\n        const visuals = streamingNode.data?.visuals ?? {};\n        const bgSegments = streamingNode.data?.backgroundSegments ?? {};\n\n        const segmentGroups: { [segid: number]: string } = {};\n        for (const tag in visuals) {\n            const segid = visuals[tag].segmentId;\n            if (!segmentGroups[segid]) {\n                let description = visuals[tag].segmentName;\n                if (bgSegments[segid]) description += ' (background)';\n                const group = await plugin.build().to(streamingNode).apply(MeshVisualGroupTransformer, { label: `Segment ${segid}`, description: description, segmentId: segid }, { state: { isCollapsed: true } }).commit();\n                segmentGroups[segid] = group.ref;\n            }\n        }\n        const visualsUpdate = plugin.build();\n        for (const tag in visuals) {\n            const ref = `${streamingNode.ref}-${tag}`;\n            const segid = visuals[tag].segmentId;\n            visualsUpdate.to(segmentGroups[segid]).apply(MeshVisualTransformer, { ref: ref, tag: tag }, { ref: ref }); // ref - hack to allow the node make itself invisible\n        }\n        await plugin.state.data.updateTree(visualsUpdate).runInContext(ctx); // QUESTION what is really the difference between this and `visualsUpdate.commit()`?\n    });\n});\n\n// TODO make available in GUI, in left panel or in right panel like Volume Streaming in src/mol-plugin-ui/structure/volume.tsx?\n","/** Testing examples for using mesh-extension.ts. */\n\nimport * as MS from './molstar-lib-imports';\n\nimport { ParseMeshlistTransformer, MeshShapeTransformer, MeshlistData } from './mesh-extension';\nimport * as MeshUtils from './mesh-utils';\nimport { InitMeshStreaming } from './mesh-streaming/transformers';\nimport { MeshServerInfo } from './mesh-streaming/server-info';\n\n\nexport const DB_URL = '/db'; // local\n// DB_URL = 'http://sestra.ncbr.muni.cz/data/cellstar-sample-data/db'; // download\n\n\nexport async function runMeshExtensionExamples(plugin: MS.PluginUIContext, db_url: string = DB_URL) {\n    console.time('TIME MESH EXAMPLES');\n    // await runIsosurfaceExample(plugin, db_url);\n    // await runMolsurfaceExample(plugin);\n\n    // Focused Ion Beam-Scanning Electron Microscopy of mitochondrial reticulum in murine skeletal muscle: https://www.ebi.ac.uk/empiar/EMPIAR-10070/\n    // await runMeshExample(plugin, 'all', db_url);\n    // await runMeshExample(plugin, 'fg', db_url);\n    // await runMultimeshExample(plugin, 'fg', 'worst', db_url);\n    // await runCifMeshExample(plugin);\n    // await runMeshExample2(plugin, 'fg');\n    await runMeshStreamingExample(plugin);\n\n    console.timeEnd('TIME MESH EXAMPLES');\n}\n\n/** Example for downloading multiple separate segments, each containing 1 mesh. */\nexport async function runMeshExample(plugin: MS.PluginUIContext, segments: 'fg' | 'all', db_url: string = DB_URL) {\n    const detail = 2;\n    const segmentIds = (segments === 'all') ?\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17] // segment-16 has no detail-2\n        : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17]; // segment-13 and segment-15 are quasi background\n\n    for (const segmentId of segmentIds) {\n        await createMeshFromUrl(plugin, `${db_url}/empiar-10070-mesh-rounded/segment-${segmentId}/detail-${detail}`, segmentId, detail, true, true, undefined);\n    }\n}\n\n/** Example for downloading multiple separate segments, each containing 1 mesh. */\nexport async function runMeshExample2(plugin: MS.PluginUIContext, segments: 'one' | 'few' | 'fg' | 'all') {\n    const detail = 1;\n    const segmentIds = (segments === 'one') ? [15]\n        : (segments === 'few') ? [1, 4, 7, 10, 16]\n            : (segments === 'all') ? [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17] // segment-16 has no detail-2\n                : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17]; // segment-13 and segment-15 are quasi background\n\n    for (const segmentId of segmentIds) {\n        await createMeshFromUrl(plugin, `http://localhost:9000/v2/empiar/empiar-10070/mesh_bcif/${segmentId}/${detail}`, segmentId, detail, false, true, undefined);\n    }\n}\n\n/** Example for downloading a single segment containing multiple meshes. */\nexport async function runMultimeshExample(plugin: MS.PluginUIContext, segments: 'fg' | 'all', detailChoice: 'best' | 'worst', db_url: string = DB_URL) {\n    const urlDetail = (detailChoice === 'best') ? '2' : 'worst';\n    const numDetail = (detailChoice === 'best') ? 2 : 1000;\n    await createMeshFromUrl(plugin, `${db_url}/empiar-10070-multimesh-rounded/segments-${segments}/detail-${urlDetail}`, 0, numDetail, false, true, undefined);\n}\n\n/** Download data and create state tree hierarchy down to visual representation. */\nexport async function createMeshFromUrl(plugin: MS.PluginUIContext, meshDataUrl: string, segmentId: number, detail: number, collapseTree: boolean, log: boolean, color?: MS.Color, parent?: MS.StateObjectSelector) {\n\n    // PARAMS - Depend on the type of transformer T -> Params<T>\n    // 1st argument to plugin.builders.data.rawData, 2nd argument to .apply\n\n    // OPTIONS - Same for each type of transformer\n    // Last argument to plugin.builders.data.rawData, plugin.builders.data.download, .apply\n    // interface StateTransform.Options {\n    //     ref?: string,  // State tree node ID (default: auto-generated ID)\n    //     tags?: string | string[],  // I don't know what this is for\n    //     state?: {\n    //         isGhost?: boolean,  // is the cell shown in the UI\n    //         isLocked?: boolean,  // can the corresponding be deleted by the user.\n    //         isHidden?: boolean,  // is the representation associated with the cell hidden\n    //         isCollapsed?: boolean,  // is the tree node collapsed?\n    //     },\n    //     dependsOn?: string[]  // references to other nodes, I think\n    // }\n\n    const update = parent ? plugin.build().to(parent) : plugin.build().toRoot();\n\n    // RAW DATA NODE\n    const rawDataNode = await update.apply(MS.Download,\n        { url: meshDataUrl, isBinary: true, label: `Downloaded Data ${segmentId}` }, // params\n        { tags: ['What', 'are', 'tags', 'good', 'for?'], state: { isCollapsed: collapseTree } } // options\n    ).commit();\n    if (log) console.log('rawDataNode:', rawDataNode);\n\n    const cifNode = await plugin.build().to(rawDataNode).apply(MS.StateTransforms.Data.ParseCif).commit();\n    if (log) console.log('cifNode:', rawDataNode);\n\n    // PARSED DATA NODE\n    const parsedDataNode = await plugin.build().to(cifNode).apply(\n        ParseMeshlistTransformer,\n        { label: undefined, segmentId: segmentId, segmentName: `Segment ${segmentId}`, detail: detail }, // params\n        { ref: `ref-parsed-data-node-${segmentId}` } // options\n    ).commit();\n    if (log) console.log('parsedDataNode:', parsedDataNode);\n    if (log) console.log('parsedDataNode.data:', parsedDataNode.data);\n    if (log) console.log('parsedDataNode mesh list stats:\\n', MeshlistData.stats(parsedDataNode.data!));\n\n    // MESH SHAPE NODE\n    const shapeNode = await plugin.build().to(parsedDataNode).apply(MeshShapeTransformer,\n        { color: color }, // options\n        { ref: `ref-shape-node-${segmentId}` }\n    ).commit();\n    if (log) console.log('shapeNode:', shapeNode);\n    if (log) console.log('shapeNode.data:', shapeNode.data);\n\n    // MESH REPR NODE\n    const reprNode = await plugin.build().to(shapeNode).apply(MS.ShapeRepresentation3D,\n        {},\n        { ref: `ref-repr-nod+e${segmentId}` }\n    ).commit();\n    if (log) console.log('reprNode:', reprNode);\n    if (log) console.log('reprNode.data:', reprNode.data);\n\n    return rawDataNode;\n\n}\n\nexport async function runMeshStreamingExample(plugin: MS.PluginUIContext, source: MeshServerInfo.MeshSource = 'empiar', entryId: string = 'empiar-10070', serverUrl?: string, parent?: MS.StateObjectSelector) {\n    const params = MS.ParamDefinition.getDefaultValues(MeshServerInfo.Params);\n    if (serverUrl) params.serverUrl = serverUrl;\n    params.source = source;\n    params.entryId = entryId;\n    await plugin.runTask(plugin.state.data.applyAction(InitMeshStreaming, params, parent?.ref), { useOverlay: false });\n}\n\n/** Example for downloading a protein structure and visualizing molecular surface. */\nexport async function runMolsurfaceExample(plugin: MS.PluginUIContext) {\n    const entryId = 'pdb-7etq';\n\n    // Node \"https://www.ebi.ac.uk/pdbe/entry-files/download/7etq.bcif\" (\"transformer\": \"ms-plugin.download\") -> var data\n    const data = await plugin.builders.data.download({ url: 'https://www.ebi.ac.uk/pdbe/entry-files/download/7etq.bcif', isBinary: true }, { state: { isGhost: false } });\n    console.log('formats:', plugin.dataFormats.list);\n\n    // Node \"CIF File\" (\"transformer\": \"ms-plugin.parse-cif\")\n    // Node \"7ETQ 1 model\" (\"transformer\": \"ms-plugin.trajectory-from-mmcif\") -> var trajectory\n    const parsed = await plugin.dataFormats.get('mmcif')!.parse(plugin, data, { entryId });\n    const trajectory: MS.StateObjectSelector<MS.PluginStateObject.Molecule.Trajectory> = parsed.trajectory;\n    console.log('parsed', parsed);\n    console.log('trajectory', trajectory);\n\n    // Node \"Model 1\" (\"transformer\": \"ms-plugin.model-from-trajectory\") -> var model\n    const model = await plugin.build().to(trajectory).apply(MS.StateTransforms.Model.ModelFromTrajectory).commit();\n    console.log('model:', model);\n\n    // Node \"Model 91 elements\" (\"transformer\": \"ms-plugin.structure-from-model\") -> var structure\n    const structure = await plugin.build().to(model).apply(MS.StateTransforms.Model.StructureFromModel,).commit();\n    console.log('structure:', structure);\n\n    // Node \"Molecular Surface\" (\"transformer\": \"ms-plugin.structure-representation-3d\") -> var repr\n    const reprParams = MS.createStructureRepresentationParams(plugin, undefined, { type: 'molecular-surface' });\n    const repr = await plugin.build().to(structure).apply(MS.StateTransforms.Representation.StructureRepresentation3D, reprParams).commit();\n    console.log('repr:', repr);\n}\n\n/** Example for downloading an EMDB density data and visualizing isosurface. */\nexport async function runIsosurfaceExample(plugin: MS.PluginUIContext, db_url: string = DB_URL) {\n    const entryId = 'emd-1832';\n    const isoLevel = 2.73;\n\n    let root = await plugin.build();\n    const data = await plugin.builders.data.download({ url: `${db_url}/emd-1832-box`, isBinary: true }, { state: { isGhost: false } });\n    const parsed = await plugin.dataFormats.get('dscif')!.parse(plugin, data, { entryId });\n\n    const volume: MS.StateObjectSelector<MS.PluginStateObject.Volume.Data> = parsed.volumes?.[0] ?? parsed.volume;\n    const volumeData = volume.cell!.obj!.data;\n    console.log('data:', data);\n    console.log('parsed:', parsed);\n    console.log('volume:', volume);\n    console.log('volumeData:', volumeData);\n\n    root = await plugin.build();\n    console.log('root:', root);\n    console.log('to:', root.to(volume));\n    console.log('toRoot:', root.toRoot());\n\n    let volumeParams;\n    volumeParams = MS.createVolumeRepresentationParams(plugin, volumeData, {\n        type: 'isosurface',\n        typeParams: {\n            alpha: 0.5,\n            isoValue: MS.Volume.adjustedIsoValue(volumeData, isoLevel, 'relative'),\n            visuals: ['solid'],\n            sizeFactor: 1,\n        },\n        color: 'uniform',\n        colorParams: { value: MS.Color(0x00aaaa) },\n\n    });\n    root.to(volume).apply(MS.StateTransforms.Representation.VolumeRepresentation3D, volumeParams);\n\n    volumeParams = MS.createVolumeRepresentationParams(plugin, volumeData, {\n        type: 'isosurface',\n        typeParams: {\n            alpha: 1.0,\n            isoValue: MS.Volume.adjustedIsoValue(volumeData, isoLevel, 'relative'),\n            visuals: ['wireframe'],\n            sizeFactor: 1,\n        },\n        color: 'uniform',\n        colorParams: { value: MS.Color(0x8800aa) },\n\n    });\n    root.to(volume).apply(MS.StateTransforms.Representation.VolumeRepresentation3D, volumeParams);\n    await root.commit();\n}\n\n\nexport async function runCifMeshExample(plugin: MS.PluginUIContext, api: string = 'http://localhost:9000/v2',\n    source: MeshServerInfo.MeshSource = 'empiar', entryId: string = 'empiar-10070',\n    segmentId: number = 1, detail: number = 10,\n) {\n    const url = `${api}/${source}/${entryId}/mesh_bcif/${segmentId}/${detail}`;\n    getMeshFromBcif(plugin, url);\n}\n\nasync function getMeshFromBcif(plugin: MS.PluginUIContext, url: string) {\n    const urlAsset = MS.Asset.getUrlAsset(plugin.managers.asset, url); // QUESTION how is urlAsset better than normal `fetch`\n    const asset = await plugin.runTask(plugin.managers.asset.resolve(urlAsset, 'binary'));\n    const parsed = await plugin.runTask(MS.CIF.parseBinary(asset.data));\n    if (parsed.isError) {\n        plugin.log.error('VolumeStreaming, parsing CIF: ' + parsed.toString());\n        return;\n    }\n    console.log('blocks:', parsed.result.blocks);\n    const mesh = await MeshUtils.meshFromCif(parsed.result);\n    console.log(mesh);\n}","import { splitEntryId } from \"./helpers\";\n\n\n/** Try to get author-defined contour value for isosurface from EMDB API. Return relative value 1.0, if not applicable or fails.  */\nexport async function getIsovalue(entryId: string): Promise<{ kind: 'absolute' | 'relative', value: number }> {\n    const split = splitEntryId(entryId);\n    if (split.source === 'emdb') {\n        try {\n            const response = await fetch(`https://www.ebi.ac.uk/emdb/api/entry/map/${split.entryNumber}`);\n            const json = await response.json();\n            const contours: any[] = json?.map?.contour_list?.contour;\n            if (contours && contours.length > 0) {\n                const theContour = contours.find(c => c.primary) || contours[0];\n                if (theContour.level === undefined) throw new Error('EMDB API response missing contour level.');\n                return { kind: 'absolute', value: theContour.level };\n            }\n        } catch {\n            // do nothing\n        }\n    }\n    return { kind: 'relative', value: 1.0 };\n}\n\nexport async function getPdbIdsForEmdbEntry(entryId: string): Promise<string[]> {\n    const split = splitEntryId(entryId);\n    const result = [];\n    if (split.source === 'emdb') {\n        entryId = entryId.toUpperCase();\n        const apiUrl = `https://www.ebi.ac.uk/pdbe/api/emdb/entry/fitted/${entryId}`;\n        try {\n            const response = await fetch(apiUrl);\n            if (response.ok) {\n                const json = await response.json();\n                const jsonEntry = json[entryId] ?? [];\n                for (const record of jsonEntry) {\n                    const pdbs = record?.fitted_emdb_id_list?.pdb_id ?? [];\n                    result.push(...pdbs);\n                }\n            }\n        } catch (ex) {\n            // do nothing\n        }\n    }\n    return result;\n}\n","import { CIF, CifBlock } from 'molstar/lib/mol-io/reader/cif';\nimport { Box3D } from 'molstar/lib/mol-math/geometry';\nimport { Tensor, Vec3 } from 'molstar/lib/mol-math/linear-algebra';\nimport { volumeFromDensityServerData } from 'molstar/lib/mol-model-formats/volume/density-server';\nimport { CustomProperties } from 'molstar/lib/mol-model/custom-property';\nimport { Grid, Volume } from 'molstar/lib/mol-model/volume';\n\n\nexport class LatticeSegmentation {\n    private segments: number[];\n    private sets: number[];\n    /** Maps setId to a set of segmentIds*/\n    private segmentMap: Map<number, Set<number>>; // computations with objects might be actually faster than with Maps and Sets?\n    /** Maps segmentId to a set of setIds*/\n    private inverseSegmentMap: Map<number, Set<number>>;\n    private grid: Grid;\n\n    private constructor(segmentationDataBlock: CifBlock, grid: Grid) {\n        const segmentationValues = segmentationDataBlock!.categories['segmentation_data_3d'].getField('values')?.toIntArray()!;\n        this.segmentMap = LatticeSegmentation.makeSegmentMap(segmentationDataBlock);\n        this.inverseSegmentMap = LatticeSegmentation.invertMultimap(this.segmentMap);\n        this.segments = Array.from(this.inverseSegmentMap.keys());\n        this.sets = Array.from(this.segmentMap.keys());\n        this.grid = grid;\n        this.grid.cells.data = Tensor.Data1(segmentationValues);\n    }\n\n    public static async fromCifBlock(segmentationDataBlock: CifBlock) {\n        const densityServerCif = CIF.schema.densityServer(segmentationDataBlock);\n        // console.log('dscif', densityServerCif);\n        const volume = await volumeFromDensityServerData(densityServerCif).run();\n        // console.log('volume', volume);\n        const grid = volume.grid;\n        return new LatticeSegmentation(segmentationDataBlock, grid);\n    }\n\n    public createSegment_old(segId: number): Volume {\n        // console.time('createSegment_old');\n        const n = this.grid.cells.data.length;\n        const newData = new Float32Array(n);\n\n        for (let i = 0; i < n; i++) {\n            newData[i] = this.segmentMap.get(this.grid.cells.data[i])?.has(segId) ? 1 : 0;\n        }\n\n        const result: Volume = {\n            sourceData: { kind: 'custom', name: 'test', data: newData as any },\n            customProperties: new CustomProperties(),\n            _propertyData: {},\n            grid: {\n                ...this.grid,\n                // stats: { min: 0, max: 1, mean: newMean, sigma: arrayRms(newData) },\n                stats: { min: 0, max: 1, mean: 0, sigma: 1 },\n                cells: {\n                    ...this.grid.cells,\n                    data: newData as any,\n                }\n            }\n        };\n        // console.timeEnd('createSegment_old');\n        return result;\n    }\n\n    public createSegment(segId: number): Volume {\n        const { space, data }: Tensor = this.grid.cells;\n        const [nx, ny, nz] = space.dimensions;\n        const axisOrder = [...space.axisOrderSlowToFast];\n        const get = space.get;\n        const cell = Box.create(0, nx, 0, ny, 0, nz);\n\n        const EXPAND_START = 2; // We need to add 2 layers of zeros, probably because of a bug in GPU marching cubes implementation\n        const EXPAND_END = 1;\n        let bbox = this.getSegmentBoundingBoxes()[segId];\n        // if (!Box.equal(bbox, this.getBoundingBox(segId))) throw new Error('Assertion Error');\n        bbox = Box.expand(bbox, EXPAND_START, EXPAND_END);\n        bbox = Box.confine(bbox, cell);\n        const [ox, oy, oz] = Box.origin(bbox);\n        const [mx, my, mz] = Box.size(bbox);\n        // n, i refer to original box; m, j to the new box\n\n        const newSpace = Tensor.Space([mx, my, mz], axisOrder, Uint8Array);\n        const newTensor = Tensor.create(newSpace, newSpace.create());\n        const newData = newTensor.data;\n        const newSet = newSpace.set;\n\n        const sets = this.inverseSegmentMap.get(segId);\n        if (!sets) throw new Error(`This LatticeSegmentation does not contain segment ${segId}`);\n\n        for (let jz = 0; jz < mz; jz++) {\n            for (let jy = 0; jy < my; jy++) {\n                for (let jx = 0; jx < mx; jx++) {\n                    // Iterating in ZYX order is faster (probably fewer cache misses)\n                    const setId = get(data, ox + jx, oy + jy, oz + jz);\n                    const value = sets.has(setId) ? 1 : 0;\n                    newSet(newData, jx, jy, jz, value);\n                }\n            }\n        }\n\n        const transform = this.grid.transform;\n        let newTransform: Grid.Transform;\n        if (transform.kind === 'matrix') {\n            throw new Error('Not implemented for transform of kind \"matrix\"'); // TODO ask if this is really needed\n        } else if (transform.kind === 'spacegroup') {\n            const newFractionalBox = Box.toFractional(bbox, cell);\n            const origFractSize = Vec3.sub(Vec3.zero(), transform.fractionalBox.max, transform.fractionalBox.min);\n            Vec3.mul(newFractionalBox.min, newFractionalBox.min, origFractSize);\n            Vec3.mul(newFractionalBox.max, newFractionalBox.max, origFractSize);\n            Vec3.add(newFractionalBox.min, newFractionalBox.min, transform.fractionalBox.min);\n            Vec3.add(newFractionalBox.max, newFractionalBox.max, transform.fractionalBox.min);\n            newTransform = { ...transform, fractionalBox: newFractionalBox };\n        } else {\n            throw new Error(`Unknown transform kind: ${transform}`);\n        }\n        const result = {\n            sourceData: { kind: 'custom', name: 'test', data: newTensor.data as any },\n            customProperties: new CustomProperties(),\n            _propertyData: {},\n            grid: {\n                stats: { min: 0, max: 1, mean: 0, sigma: 1 },\n                cells: newTensor,\n                transform: newTransform,\n            }\n        };\n        return result;\n    }\n\n    private getBoundingBox(segId: number): Box {\n        const { space, data }: Tensor = this.grid.cells;\n        const [nx, ny, nz] = space.dimensions;\n        const get = space.get;\n\n        let minX = nx, minY = ny, minZ = nz;\n        let maxX = -1, maxY = -1, maxZ = -1;\n\n        const sets = this.inverseSegmentMap.get(segId);\n        if (!sets) throw new Error(`This LatticeSegmentation does not contain segment ${segId}`);\n\n        for (let iz = 0; iz < nz; iz++) {\n            for (let iy = 0; iy < ny; iy++) {\n                for (let ix = 0; ix < nx; ix++) {\n                    // Iterating in ZYX order is faster (probably fewer cache misses)\n                    const setId = get(data, ix, iy, iz);\n                    if (sets.has(setId)) {\n                        if (ix < minX) minX = ix;\n                        if (iy < minY) minY = iy;\n                        if (iz < minZ) minZ = iz;\n                        if (ix > maxX) maxX = ix;\n                        if (iy > maxY) maxY = iy;\n                        if (iz > maxZ) maxZ = iz;\n                    }\n                }\n            }\n        }\n        if (maxX === -1) { // segment contains no voxels\n            return Box.create(0, 1, 0, 1, 0, 1);\n        }\n        const box = Box.create(minX, maxX + 1, minY, maxY + 1, minZ, maxZ + 1);\n        return box;\n    }\n\n    private static _getSegmentBoundingBoxes(self: LatticeSegmentation) {\n        const { space, data }: Tensor = self.grid.cells;\n        const [nx, ny, nz] = space.dimensions;\n        const get = space.get;\n\n        const setBoxes: { [setId: number]: Box } = {}; // with object this is faster than with Map\n        self.sets.forEach(setId => setBoxes[setId] = Box.create(nx, -1, ny, -1, nz, -1));\n\n        for (let iz = 0; iz < nz; iz++) {\n            for (let iy = 0; iy < ny; iy++) {\n                for (let ix = 0; ix < nx; ix++) {\n                    // Iterating in ZYX order is faster (probably fewer cache misses)\n                    const setId = get(data, ix, iy, iz);\n                    Box.addPoint_InclusiveEnd(setBoxes[setId], ix, iy, iz);\n                }\n            }\n        }\n\n        const segmentBoxes: { [segmentId: number]: Box } = {};\n        self.segments.forEach(segmentId => segmentBoxes[segmentId] = Box.create(nx, -1, ny, -1, nz, -1));\n        self.inverseSegmentMap.forEach((setIds, segmentId) => {\n            setIds.forEach(setId => {\n                segmentBoxes[segmentId] = Box.cover(segmentBoxes[segmentId], setBoxes[setId]);\n            });\n        });\n\n        for (const segmentId in segmentBoxes) {\n            if (segmentBoxes[segmentId][5] === -1) { // segment's box left unchanged -> contains no voxels\n                segmentBoxes[segmentId] = Box.create(0, 1, 0, 1, 0, 1);\n            } else {\n                segmentBoxes[segmentId] = Box.expand(segmentBoxes[segmentId], 0, 1); // inclusive end -> exclusive end\n            }\n        }\n        return segmentBoxes;\n    }\n    private getSegmentBoundingBoxes = lazyGetter(() => LatticeSegmentation._getSegmentBoundingBoxes(this));\n\n    private static invertMultimap<K, V>(map: Map<K, Set<V>>): Map<V, Set<K>> {\n        const inverted = new Map<V, Set<K>>();\n        map.forEach((values, key) => {\n            values.forEach(value => {\n                if (!inverted.has(value)) inverted.set(value, new Set<K>());\n                inverted.get(value)?.add(key);\n            });\n        });\n        return inverted;\n    }\n\n    private static makeSegmentMap(segmentationDataBlock: CifBlock): Map<number, Set<number>> {\n        const setId = segmentationDataBlock.categories['segmentation_data_table'].getField('set_id')?.toIntArray()!;\n        const segmentId = segmentationDataBlock.categories['segmentation_data_table'].getField('segment_id')?.toIntArray()!;\n        const map = new Map<number, Set<number>>();\n        for (let i = 0; i < segmentId.length; i++) {\n            if (!map.has(setId[i])) {\n                map.set(setId[i], new Set());\n            }\n            map.get(setId[i])!.add(segmentId[i]);\n        }\n        return map;\n    }\n\n    public benchmark(segId: number) {\n        const N = 100;\n\n        console.time(`createSegment ${segId} ${N}x`);\n        for (let i = 0; i < N; i++) {\n            this.getSegmentBoundingBoxes = lazyGetter(() => LatticeSegmentation._getSegmentBoundingBoxes(this));\n            this.createSegment(segId);\n        }\n        console.timeEnd(`createSegment ${segId} ${N}x`);\n    }\n    public benchmarkAll() {\n        const N = 100;\n        const segments: number[] = [];\n        this.inverseSegmentMap.forEach((v, k) => segments.push(k));\n\n        console.time(`createSegment ALL ${N}x`);\n        for (let i = 0; i < N; i++) {\n            this.getSegmentBoundingBoxes = lazyGetter(() => LatticeSegmentation._getSegmentBoundingBoxes(this));\n            for (const segId of segments) {\n                this.createSegment(segId);\n            }\n        }\n        console.timeEnd(`createSegment ALL ${N}x`);\n    }\n}\n\n\ntype Box = [number, number, number, number, number, number];\n\n/** Represents a 3D box in integer coordinates. xFrom... is inclusive, xTo... is exclusive. */\nnamespace Box {\n    export function create(xFrom: number, xTo: number, yFrom: number, yTo: number, zFrom: number, zTo: number): Box {\n        return [xFrom, xTo, yFrom, yTo, zFrom, zTo];\n    }\n    export function expand(box: Box, expandFrom: number, expandTo: number): Box {\n        const [xFrom, xTo, yFrom, yTo, zFrom, zTo] = box;\n        return [xFrom - expandFrom, xTo + expandTo, yFrom - expandFrom, yTo + expandTo, zFrom - expandFrom, zTo + expandTo];\n    }\n    export function confine(box1: Box, box2: Box): Box {\n        const [xFrom1, xTo1, yFrom1, yTo1, zFrom1, zTo1] = box1;\n        const [xFrom2, xTo2, yFrom2, yTo2, zFrom2, zTo2] = box2;\n        return [\n            Math.max(xFrom1, xFrom2), Math.min(xTo1, xTo2),\n            Math.max(yFrom1, yFrom2), Math.min(yTo1, yTo2),\n            Math.max(zFrom1, zFrom2), Math.min(zTo1, zTo2)\n        ];\n    }\n    export function cover(box1: Box, box2: Box): Box {\n        const [xFrom1, xTo1, yFrom1, yTo1, zFrom1, zTo1] = box1;\n        const [xFrom2, xTo2, yFrom2, yTo2, zFrom2, zTo2] = box2;\n        return [\n            Math.min(xFrom1, xFrom2), Math.max(xTo1, xTo2),\n            Math.min(yFrom1, yFrom2), Math.max(yTo1, yTo2),\n            Math.min(zFrom1, zFrom2), Math.max(zTo1, zTo2)\n        ];\n    }\n    export function size(box: Box): [number, number, number] {\n        const [xFrom, xTo, yFrom, yTo, zFrom, zTo] = box;\n        return [xTo - xFrom, yTo - yFrom, zTo - zFrom];\n    }\n    export function origin(box: Box): [number, number, number] {\n        const xFrom = box[0];\n        const yFrom = box[2];\n        const zFrom = box[4];\n        return [xFrom, yFrom, zFrom];\n    }\n    export function log(name: string, box: Box): void {\n        const [xFrom, xTo, yFrom, yTo, zFrom, zTo] = box;\n        console.log(`Box ${name}: [${xFrom}:${xTo}, ${yFrom}:${yTo}, ${zFrom}:${zTo}], size: ${size(box)}`);\n    }\n    export function toFractional(box: Box, relativeTo: Box): Box3D {\n        const [xFrom, xTo, yFrom, yTo, zFrom, zTo] = box;\n        const [x0, y0, z0] = origin(relativeTo);\n        const [sizeX, sizeY, sizeZ] = size(relativeTo);\n        const min = Vec3.create((xFrom - x0) / sizeX, (yFrom - y0) / sizeY, (zFrom - z0) / sizeZ);\n        const max = Vec3.create((xTo - x0) / sizeX, (yTo - y0) / sizeY, (zTo - z0) / sizeZ);\n        return Box3D.create(min, max);\n    }\n    export function addPoint_InclusiveEnd(box: Box, x: number, y: number, z: number): void {\n        if (x < box[0]) box[0] = x;\n        if (x > box[1]) box[1] = x;\n        if (y < box[2]) box[2] = y;\n        if (y > box[3]) box[3] = y;\n        if (z < box[4]) box[4] = z;\n        if (z > box[5]) box[5] = z;\n    }\n    export function equal(box1: Box, box2: Box): boolean {\n        return box1.every((value, i) => value === box2[i]);\n    }\n}\n\n\nfunction lazyGetter<T>(getter: () => T) {\n    let value: T | undefined = undefined;\n    return () => {\n        if (value === undefined) value = getter();\n        return value;\n    };\n}\n","import { CustomProperties } from 'molstar/lib/mol-model/custom-property';\nimport { Volume } from 'molstar/lib/mol-model/volume';\nimport { createVolumeRepresentationParams } from 'molstar/lib/mol-plugin-state/helpers/volume-representation-params';\nimport { PluginStateObject } from 'molstar/lib/mol-plugin-state/objects';\nimport { StateTransforms } from 'molstar/lib/mol-plugin-state/transforms';\nimport { StateObjectSelector } from 'molstar/lib/mol-state';\nimport { Asset } from 'molstar/lib/mol-util/assets';\nimport { Color } from 'molstar/lib/mol-util/color';\nimport { ColorNames } from 'molstar/lib/mol-util/color/names';\nimport { PluginUIContext } from 'molstar/lib/mol-plugin-ui/context';\nimport { UUID } from 'molstar/lib/mol-util';\nimport { Download, RawData } from 'molstar/lib/mol-plugin-state/transforms/data';\n\nimport * as MeshExamples from '../mesh-extension/examples';\nimport { type Metadata, Segment } from '../volume-api-client-lib/data';\nimport * as ExternalAPIs from './external-api';\nimport { CreateVolume, ExampleType, MetadataUtils, NodeManager, splitEntryId } from './helpers';\nimport { LatticeSegmentation } from './lattice-segmentation';\nimport { AppModel, API2 } from './model';\nimport { CreateGroup } from 'molstar/lib/mol-plugin-state/transforms/misc';\n\n\nconst USE_GHOST_NODES = false;\nconst DEFAULT_MESH_DETAIL: number | null = 5;  // null means worst\nconst MESH_HIDE_BACKGROUND_EMPIAR_10070 = true;\n\n\ninterface Example {\n    exampleType: ExampleType,\n    defaultEntryId: string,\n    action: (entryId: string) => any,\n}\n\n\nexport class Session {\n    constructor(\n        private id: UUID,\n        private model: AppModel,\n        private plugin: PluginUIContext\n    ) { }\n\n    private metadata?: Metadata;\n    private volume?: Volume;\n    private segmentation?: LatticeSegmentation;\n\n    private currentSegments: any[] = [];\n    private volumeRepr: any;\n\n    private entryRoot?: StateObjectSelector;\n    private groupNodeMgr = new NodeManager();\n    private segmentationNodeMgr = new NodeManager();\n    private pdbModelNodeMgr = new NodeManager();\n    private meshSegmentNodeMgr = new NodeManager();\n\n\n    private readonly exampleEmdb: Example = {\n        exampleType: 'emdb',\n        defaultEntryId: 'emd-1832',\n        action: async (entryId) => {\n            // const isoLevel = { kind: 'relative', value: 2.73};\n            this.metadata = await this.initMetadata(entryId);\n            const isoLevel = await ExternalAPIs.getIsovalue(this.metadata.grid.general.source_db_id ?? entryId);\n            const source = splitEntryId(entryId).source as 'empiar' | 'emdb';\n            const segmentationId = 0;\n            const { plugin } = this;\n            this.entryRoot = await this.plugin.build().toRoot().apply(CreateGroup, { label: entryId, description: 'Meshes' }).commit();\n\n            const MAX_VOXELS = 10 ** 7;\n\n            const hasVolumes = this.metadata.grid.volumes.volume_downsamplings.length > 0;\n            const hasLattices = this.metadata.grid.segmentation_lattices.segmentation_lattice_ids.length > 0;\n\n            // VOLUME\n            if (hasVolumes) {\n                const volumeUrl = API2.volumeUrl(source, entryId, null, MAX_VOXELS);\n                const volumeDataNode = await plugin.build().to(this.entryRoot).apply(Download, { url: volumeUrl, isBinary: true }, { state: { isGhost: USE_GHOST_NODES } }).commit();\n                // const parsed = await plugin.dataFormats.get('dscif')!.parse(plugin, volumeDataNode, { entryId });\n                const parsed = await plugin.dataFormats.get('dscif')!.parse(plugin, volumeDataNode);\n                const volume: StateObjectSelector<PluginStateObject.Volume.Data> = parsed.volumes?.[0] ?? parsed.volume;\n                const volumeData = volume.cell!.obj!.data;\n                this.volume = volumeData;\n\n                const repr = plugin.build();\n                repr\n                    .to(volume)\n                    .apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(this.plugin, volumeData, {\n                        type: 'isosurface',\n                        typeParams: { alpha: 0.2, isoValue: Volume.adjustedIsoValue(volumeData, isoLevel.value, isoLevel.kind) },\n                        color: 'uniform',\n                        colorParams: { value: Color(0x121212) }\n                    }));\n                await repr.commit();\n            }\n\n            // LATTICE SEGMENTATION\n            if (hasLattices) {\n                const latticeUrl = API2.latticeUrl(source, entryId, segmentationId, null, MAX_VOXELS);\n                const latticeDataNode = await plugin.build().to(this.entryRoot).apply(Download, { url: latticeUrl, isBinary: true }, { state: { isGhost: USE_GHOST_NODES } }).commit();\n                // const latticeDataNode = await plugin.builders.data.download({ url: latticeUrl, isBinary: true }, { state: { isGhost: USE_GHOST_NODES } });\n                const cif = await plugin.build().to(latticeDataNode).apply(StateTransforms.Data.ParseCif).commit();\n                // Debugging.logCifOverview(cif.data!, latticeUrl);\n                const latticeBlock = cif.data!.blocks.find(b => b.header === 'SEGMENTATION_DATA');\n                // TODO download and parse cif without changing state tree?\n\n                this.segmentation = await LatticeSegmentation.fromCifBlock(latticeBlock!);\n\n                await this.showSegments(this.metadata.annotation.segment_list);\n            }\n        }\n    }\n\n    private readonly exampleBioimage: Example = {\n        exampleType: 'bioimage',\n        defaultEntryId: 'emd-99999',\n        action: async (entryId) => {\n            this.metadata = await this.initMetadata(entryId);\n            const url = API2.volumeUrl('emdb', entryId, null, 10 ** 7);\n            // const url = API2.volumeUrl('emdb', entryId, [[64_000, 64_000, 0], [70_000, 69_000, 1_200]], 10**2);\n            // const url = API2.volumeUrl('emdb', entryId, [[64_000, 64_000, 0], [80_000, 65_600, 1_600]], 10**2); // 1025 voxels\n            // const url = API2.volumeUrl('emdb', entryId, [[64_000, 64_000, 0], [76_000, 68_000, 800]], 10**2); // 1023 voxels\n            // const url = API2.volumeUrl('emdb', entryId, [[64_000, 64_000, 0], [70_400, 69_600, 1_200]], 10**2); // 1020 voxels\n            // const url = API2.volumeUrl('emdb', entryId, [[64_000, 64_000, 400], [67_600, 67_600, 4_000]], 10**2); // 1000 voxels\n            // const url = API2.volumeUrl('emdb', entryId, [[64_000, 64_000, 0], [79_600, 65_600, 1_600]], 10**2); // 1000 voxels\n            // const url = API2.volumeUrl('emdb', entryId, [[64_000, 64_000, 400], [108_000, 64_800, 1200]], 10**2); // 999 voxels\n            // const url = API2.volumeUrl('emdb', entryId, [[64_000, 64_000, 400], [78_400, 67_200, 1_200]], 10**2); // 999 voxels\n            // const url = API2.volumeUrl('emdb', entryId, [[64_000, 64_000, 0], [69_600, 68_000, 2_000]], 10**2); // 900 voxels\n\n            this.entryRoot = await this.plugin.build().toRoot().apply(CreateGroup, { label: entryId, description: 'Bioimage' }).commit();\n            const data = await this.plugin.build().to(this.entryRoot).apply(Download, { url, isBinary: true }, { state: { isGhost: USE_GHOST_NODES } }).commit();\n            const parsed = await this.plugin.dataFormats.get('dscif')!.parse(this.plugin, data);\n            // const cif = await this.plugin.build().to(data).apply(StateTransforms.Data.ParseCif).commit(); // DEBUG\n            // Debugging.logCifOverview(cif.data!); // DEBUG\n            // Debugging.logCifOverview(parsed); // DEBUG\n            const volume: StateObjectSelector<PluginStateObject.Volume.Data> = parsed.volumes?.[0] ?? parsed.volume;\n            const volumeData = volume.cell!.obj!.data;\n            this.volume = volumeData;\n            // console.log('volume.grid:', volumeData.grid); // DEBUG\n\n            this.volumeRepr = this.plugin.build()\n                .to(volume)\n                .apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(this.plugin, volumeData, {\n                    type: 'isosurface',\n                    typeParams: { alpha: 1.0, isoValue: Volume.IsoValue.relative(-0.55), tryUseGpu: false  },\n                    color: 'uniform',\n                    colorParams: { value: Color(0x224899) }\n                }));\n            await this.volumeRepr.commit();\n\n            // const segP = this.createSegment99999Plus(volumeData, 0);\n            // const segM = this.createSegment99999Minus(volumeData, -0.55);\n            // await this.showSegment(segP, [0.3, 0.7, 0.1]);\n            // await this.showSegment(segM, [0.1, 0.3, 0.7]);\n\n        }\n    }\n\n    private readonly exampleMeshes: Example = {\n        exampleType: 'meshes',\n        defaultEntryId: 'empiar-10070',\n        action: async (entryId) => {\n            this.metadata = await this.initMetadata(entryId);\n            this.entryRoot = await this.plugin.build().toRoot().apply(CreateGroup, { label: entryId, description: 'Meshes' }).commit();\n            if (entryId === 'empiar-10070' && MESH_HIDE_BACKGROUND_EMPIAR_10070) {\n                const bgSegments = [13, 15];\n                MetadataUtils.dropSegments(this.metadata, bgSegments);\n            }\n\n            await this.showMeshSegments(this.metadata.annotation.segment_list, entryId);\n        }\n    }\n\n    private readonly exampleMeshStreaming: Example = {\n        exampleType: 'meshStreaming',\n        defaultEntryId: 'empiar-10070',\n        action: async (entryId) => {\n            this.metadata = await this.initMetadata(entryId);\n            this.entryRoot = await this.plugin.build().toRoot().apply(CreateGroup, { label: entryId, description: 'Mesh Streaming' }).commit();\n            const source = splitEntryId(entryId).source as 'empiar' | 'emdb';\n            await MeshExamples.runMeshStreamingExample(this.plugin, source, entryId, API2.volumeServerUrl, this.entryRoot);\n        }\n    }\n\n    private readonly exampleAuto: Example = {\n        exampleType: 'auto',\n        defaultEntryId: 'emd-1832',\n        action: async (entryId) => {\n            this.metadata = await this.initMetadata(entryId);\n            const source = splitEntryId(entryId).source as 'empiar' | 'emdb';\n            const isoLevelPromise = ExternalAPIs.getIsovalue(this.metadata.grid.general.source_db_id ?? entryId);\n            const pdbsPromise = ExternalAPIs.getPdbIdsForEmdbEntry(this.metadata.grid.general.source_db_id ?? entryId);\n\n            const hasVolumes = this.metadata.grid.volumes.volume_downsamplings.length > 0;\n            const hasLattices = this.metadata.grid.segmentation_lattices.segmentation_lattice_ids.length > 0;\n            const hasMeshes = this.metadata.grid.segmentation_meshes.mesh_component_numbers.segment_ids !== undefined;\n\n            // const A = 10 ** 4;\n            // const BOX: [[number, number, number], [number, number, number]] = [[-A, -A, -A], [A, A, A]];\n            const BOX = null;\n            const MAX_VOXELS = 10 ** 7;\n\n            // // DEBUG\n            // const debugVolumeInfo = false;\n            // if (debugVolumeInfo) {\n            //     const url = API2.volumeInfoUrl(source, entryId);\n            //     const data = await this.plugin.builders.data.download({ url, isBinary: true }, { state: { isGhost: USE_GHOST_NODES } });\n            //     const cif = await this.plugin.build().to(data).apply(StateTransforms.Data.ParseCif).commit();\n            //     Debugging.logCifOverview(cif.data!, url); // TODO when could cif.data be undefined?\n            // }\n\n            // // DEBUG\n            // const debugMeshesBcif = false;\n            // const debugSegment = 1;\n            // const debugDetail = 10;\n            // if (debugMeshesBcif) {\n            //     const url = API2.meshUrl_Bcif(source, entryId, debugSegment, debugDetail);\n            //     const data = await this.plugin.builders.data.download({ url, isBinary: true }, { state: { isGhost: USE_GHOST_NODES } });\n            //     const cif = await this.plugin.build().to(data).apply(StateTransforms.Data.ParseCif).commit();\n            //     Debugging.logCifOverview(cif.data!, url); // TODO when could cif.data be undefined?\n            // }\n            this.entryRoot = await this.plugin.build().toRoot().apply(CreateGroup, { label: entryId, description: 'Auto' }).commit();\n\n            if (hasVolumes) {\n                const url = API2.volumeUrl(source, entryId, BOX, MAX_VOXELS);\n                const data = await this.plugin.build().to(this.entryRoot).apply(Download, { url, isBinary: true, label: `Volume Data: ${url}` }, { state: { isGhost: USE_GHOST_NODES } }).commit();\n                // const data = await this.plugin.builders.data.download({ url, isBinary: true, label: `Volume Data: ${url}` }, { state: { isGhost: USE_GHOST_NODES } });\n                // const cif = await this.plugin.build().to(data).apply(StateTransforms.Data.ParseCif).commit(); Debugging.logCifOverview(cif.data!); // DEBUG\n                const parsed = await this.plugin.dataFormats.get('dscif')!.parse(this.plugin, data, { entryId });\n                const volume: StateObjectSelector<PluginStateObject.Volume.Data> = parsed.volumes?.[0] ?? parsed.volume;\n                let volumeData = volume.cell!.obj!.data;\n                this.volume = volumeData;\n                // const isoLevel = { kind: 'relative', value: 2.73}; // rel 2.73 (abs 0.42) is OK for emd-1832\n                const isoLevel = await isoLevelPromise;\n                await this.plugin.build()\n                    .to(volume)\n                    .apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(this.plugin, volumeData, {\n                        type: 'isosurface',\n                        typeParams: { alpha: 0.2, isoValue: Volume.adjustedIsoValue(volumeData, isoLevel.value, isoLevel.kind), tryUseGpu: false  },\n                        color: 'uniform',\n                        colorParams: { value: Color(0x121212) }\n                    }))\n                    .commit();\n            }\n            if (hasLattices) {\n                const url = API2.latticeUrl(source, entryId, 0, BOX, MAX_VOXELS);\n                const data = await this.plugin.build().to(this.entryRoot).apply(Download, { url, isBinary: true, label: `Segmentation Data: ${url}` }, { state: { isGhost: USE_GHOST_NODES } }).commit();\n                // const data = await this.plugin.builders.data.download({ url, isBinary: true, label: `Segmentation Data: ${url}` }, { state: { isGhost: USE_GHOST_NODES } });\n                const cif = await this.plugin.build().to(data).apply(StateTransforms.Data.ParseCif).commit();\n                // Debugging.logCifOverview(cif.data!, url); // TODO when could cif.data be undefined?\n                const latticeBlock = cif.data!.blocks.find(b => b.header === 'SEGMENTATION_DATA');\n                if (latticeBlock) {\n                    this.segmentation = await LatticeSegmentation.fromCifBlock(latticeBlock);\n                    await this.showSegments(this.metadata.annotation.segment_list);\n                } else {\n                    console.log('WARNING: Block SEGMENTATION_DATA is missing. Not showing segmentations.');\n                }\n            }\n            if (hasMeshes) {\n                await MeshExamples.runMeshStreamingExample(this.plugin, source, entryId, API2.volumeServerUrl, this.entryRoot);\n            }\n\n            this.model.pdbs.nextWithinSession(await pdbsPromise, this.id);\n        }\n    }\n\n    public readonly examples: { [name in ExampleType]: Example } = {\n        emdb: this.exampleEmdb,\n        bioimage: this.exampleBioimage,\n        meshes: this.exampleMeshes,\n        meshStreaming: this.exampleMeshStreaming,\n        auto: this.exampleAuto,\n    }\n\n    private async initMetadata(entryId: string) {\n        if (!this.metadata) {\n            const source = splitEntryId(entryId).source as 'empiar' | 'emdb';\n            this.metadata = await API2.getMetadata(source, entryId);\n            this.model.annotation.nextWithinSession(this.metadata.annotation, this.id);\n        }\n        return this.metadata;\n    }\n\n    private async loadPdb(pdbId: string, parent?: StateObjectSelector) {\n        const url = `https://www.ebi.ac.uk/pdbe/entry-files/download/${pdbId}.bcif`;\n        return await this.loadPdbStructureFromBcif(url, { dataLabel: `PDB Data: ${url}` }, parent);\n    }\n\n    private async loadPdbStructureFromBcif(url: string, options?: { dataLabel?: string }, parent?: StateObjectSelector) {\n        const urlAsset = Asset.getUrlAsset(this.plugin.managers.asset, url);\n        const asset = await this.plugin.runTask(this.plugin.managers.asset.resolve(urlAsset, 'binary'));\n        const data = asset.data;\n\n        const update = parent ? this.plugin.build().to(parent) : this.plugin.build().toRoot();\n        const dataNode = await update.apply(RawData, { data, label: options?.dataLabel }).commit();\n        const trajectoryNode = await this.plugin.builders.structure.parseTrajectory(dataNode, 'mmcif');\n        await this.plugin.builders.structure.hierarchy.applyPreset(trajectoryNode, 'default');\n        return dataNode;\n    }\n\n    async showPdb(pdbId: string | undefined) {\n        this.model.status.nextWithinSession('loading', this.id);\n        try {\n            this.pdbModelNodeMgr.hideAllNodes();\n            if (pdbId) {\n                const update = this.entryRoot ? this.plugin.build().to(this.entryRoot) : this.plugin.build().toRoot();\n                const group = await this.groupNodeMgr.showNode('Fitted Models', () => update.apply(CreateGroup, { label: 'Fitted Models' }).selector);\n                await update.commit();\n                await this.pdbModelNodeMgr.showNode(pdbId, async () => await this.loadPdb(pdbId, group));\n            }\n            this.model.currentPdb.nextWithinSession(pdbId, this.id);\n            this.model.status.nextWithinSession('ready', this.id);\n        } catch (ex) {\n            this.model.status.nextWithinSession('error', this.id);\n            throw ex;\n        }\n    }\n\n    /** Make visible the specified set of lattice segments */\n    async showSegments(segments: Segment[]) {\n        if (segments.length === 1) {\n            this.model.currentSegment.nextWithinSession(segments[0], this.id);\n        } else {\n            this.model.currentSegment.nextWithinSession(undefined, this.id);\n        }\n\n        const update = this.entryRoot ? this.plugin.build().to(this.entryRoot) : this.plugin.build().toRoot();\n        const group = await this.groupNodeMgr.showNode('Segmentation', () => update.apply(CreateGroup, { label: 'Segmentation' }).selector);\n\n        this.segmentationNodeMgr.hideAllNodes();\n\n        for (const seg of segments) {\n            this.segmentationNodeMgr.showNode(seg.id.toString(), () => {\n                const volume = this.segmentation?.createSegment(seg.id);\n                Volume.PickingGranularity.set(volume!, 'volume');\n                const volumeNode = update.to(group).apply(CreateVolume, { volume, label: `Segment ${seg.id}`, description: seg.biological_annotation?.name }, { state: { isCollapsed: true } });\n\n                volumeNode.apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(this.plugin, volume, {\n                    type: 'isosurface',\n                    typeParams: { alpha: 1, isoValue: Volume.IsoValue.absolute(0.95), tryUseGpu: false },\n                    color: 'uniform',\n                    colorParams: { value: Color.fromNormalizedArray(seg.colour, 0) }\n                }));\n                return volumeNode.selector;\n            });\n        }\n\n        // const controlPoints: Vec2[] = [\n        //     Vec2.create(0, 0),\n        //     Vec2.create(0.5, 0),\n        //     Vec2.create(0.98, 1),\n        //     Vec2.create(1.1, 1),\n        // ]\n\n        // // const list = {\n        // //     kind: 'interpolate' as const,\n        // //     colors: [\n        // //         [Color(0x0), 0]\n        // //     ]\n        // // }\n\n        // root.apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(this.plugin, volume, {\n        //     type: 'direct-volume',\n        //     typeParams: { \n        //         ignoreLight: true,\n        //         stepsPerCell: 1,\n        //         controlPoints,\n        //         xrayShaded: false,\n        //     },\n        //     color: 'uniform',\n        //     colorParams: { value: Color(Math.round(Math.random() * 0xffffff)) }\n        // }));\n\n        await update.commit();\n    }\n\n    /** Make visible the specified set of mesh segments */\n    async showMeshSegments(segments: Segment[], entryId: string) {\n        if (segments.length === 1) {\n            this.model.currentSegment.nextWithinSession(segments[0], this.id);\n        } else {\n            this.model.currentSegment.nextWithinSession(undefined, this.id);\n        }\n\n        this.meshSegmentNodeMgr.hideAllNodes();\n\n        for (const seg of segments) {\n            await this.meshSegmentNodeMgr.showNode(seg.id.toString(), async () => {\n                const detail = MetadataUtils.getSufficientDetail(this.metadata!, seg.id, DEFAULT_MESH_DETAIL);\n                const color = seg.colour.length >= 3 ? Color.fromNormalizedArray(seg.colour, 0) : ColorNames.gray;\n                return await MeshExamples.createMeshFromUrl(this.plugin, API2.meshUrl_Bcif(splitEntryId(entryId).source, entryId, seg.id, detail), seg.id, detail, true, false, color, this.entryRoot);\n            });\n        }\n    }\n\n    private createFakeSegment(volume: Volume, level: number): Volume {\n        const { mean, sigma } = volume.grid.stats;\n        const { data, space } = volume.grid.cells;\n        const newData = new Float32Array(data.length);\n\n        for (let i = 0; i < space.dimensions[0]; i++) {\n            if (Math.floor(10 * i / space.dimensions[0]) !== level) continue;\n\n            for (let j = 0; j < space.dimensions[1]; j++) {\n                for (let k = 0; k < space.dimensions[2]; k++) {\n                    const o = space.dataOffset(i, j, k);\n                    const v = (data[o] - mean) / sigma;\n                    if (v > 2.5) newData[o] = 1;\n                }\n            }\n        }\n\n        return {\n            sourceData: { kind: 'custom', name: 'test', data: newData as any },\n            customProperties: new CustomProperties(),\n            _propertyData: {},\n            grid: {\n                ...volume.grid,\n                //stats: { min: 0, max: 1, mean: newMean, sigma: arrayRms(newData) },\n                stats: { min: 0, max: 1, mean: 0, sigma: 1 },\n                cells: {\n                    ...volume.grid.cells,\n                    data: newData as any,\n                }\n            }\n        };\n    }\n\n    private createSegment99999Plus(volume: Volume, threshold: number): Volume {\n        const { mean, sigma } = volume.grid.stats;\n        const { data, space } = volume.grid.cells;\n        const newData = new Float32Array(data.length);\n\n        for (let i = 0; i < space.dimensions[0]; i++) {\n            for (let j = 0; j < space.dimensions[1]; j++) {\n                for (let k = 0; k < space.dimensions[2]; k++) {\n                    const o = space.dataOffset(i, j, k);\n                    const v = (data[o] - mean) / sigma;\n                    if (v > threshold) newData[o] = 1;\n                }\n            }\n        }\n\n        return {\n            sourceData: { kind: 'custom', name: 'test', data: newData as any },\n            customProperties: new CustomProperties(),\n            _propertyData: {},\n            grid: {\n                ...volume.grid,\n                //stats: { min: 0, max: 1, mean: newMean, sigma: arrayRms(newData) },\n                stats: { min: 0, max: 1, mean: 0, sigma: 1 },\n                cells: {\n                    ...volume.grid.cells,\n                    data: newData as any,\n                }\n            }\n        };\n    }\n\n    private createSegment99999Minus(volume: Volume, threshold: number): Volume {\n        const { mean, sigma } = volume.grid.stats;\n        const { data, space } = volume.grid.cells;\n        const newData = new Float32Array(data.length);\n\n        for (let i = 0; i < space.dimensions[0]; i++) {\n            for (let j = 0; j < space.dimensions[1]; j++) {\n                for (let k = 0; k < space.dimensions[2]; k++) {\n                    const o = space.dataOffset(i, j, k);\n                    const v = (data[o] - mean) / sigma;\n                    if (v > threshold && v < -0.35) newData[o] = 1;\n                }\n            }\n        }\n\n        return {\n            sourceData: { kind: 'custom', name: 'test', data: newData as any },\n            customProperties: new CustomProperties(),\n            _propertyData: {},\n            grid: {\n                ...volume.grid,\n                //stats: { min: 0, max: 1, mean: newMean, sigma: arrayRms(newData) },\n                stats: { min: 0, max: 1, mean: 0, sigma: 1 },\n                cells: {\n                    ...volume.grid.cells,\n                    data: newData as any,\n                }\n            }\n        };\n    }\n\n    private async showSegment(volume: Volume, color: number[], opacity = 1) {\n        const update = this.plugin.build();\n        const root = update.toRoot().apply(CreateVolume, { volume });\n\n        const seg = root.apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(this.plugin, volume, {\n            type: 'isosurface',\n            typeParams: { alpha: opacity, isoValue: Volume.IsoValue.absolute(0.95), transparentBackfaces: 'off', doubleSided: false, flatShaded: true, tryUseGpu: false  },\n            color: 'uniform',\n            colorParams: { value: Color.fromNormalizedArray(color, 0) }\n        }));\n\n        this.currentSegments.push(seg.selector);\n\n        await update.commit();\n    }\n\n    /** Change isovalue for existing volume representation (in Bioimage example) */\n    async setIsoValue(newValue: number, showSegmentation: boolean) {\n        if (!this.volumeRepr) return;\n\n        const { plugin } = this;\n        await plugin.build().to(this.volumeRepr).update(createVolumeRepresentationParams(this.plugin, this.volume, {\n            type: 'isosurface',\n            typeParams: { alpha: showSegmentation ? 0.0 : 1, isoValue: Volume.IsoValue.relative(newValue) },\n            color: 'uniform',\n            colorParams: { value: showSegmentation ? Color(0x777777) : Color(0x224899) }\n        })).commit();\n\n        const update = this.plugin.build();\n\n        for (const l of this.currentSegments) update.delete(l);\n        this.currentSegments = [];\n        await update.commit();\n\n        if (showSegmentation) {\n            const segP = this.createSegment99999Plus(this.volume!, -0.35);\n            const segM = this.createSegment99999Minus(this.volume!, newValue);\n            await this.showSegment(segP, [0.3, 0.7, 0.6], 0.5);\n            await this.showSegment(segM, [0.1, 0.3, 0.7]);\n        }\n\n    }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { UUID } from 'molstar/lib/mol-util';\n\n\n/** Restricts SubjectBehavior.next method to a specific session, \n * so that async functions from the previous sessions cannot \n * change state in the current session. */\nexport class SubjectSessionManager {\n    currentSession: UUID = UUID.createv4();\n    subjects: BehaviorSubjectWithinSession<any>[] = [];\n\n    startNewSession() {\n        this.currentSession = UUID.createv4();\n        return this.currentSession;\n    }\n    behaviorSubject<T>(value: T) {\n        const subject = new BehaviorSubjectWithinSession(value, this);\n        this.subjects.push(subject);\n        return subject;\n    }\n    resetAllSubjects() {\n        for (const subject of this.subjects) {\n            subject.reset();\n        }\n    }\n}\n\n\nclass BehaviorSubjectWithinSession<T> extends BehaviorSubject<T> {\n    readonly sessionManager: SubjectSessionManager;\n    readonly default: T;\n\n    constructor(value: T, sessionManager: SubjectSessionManager) {\n        super(value);\n        this.sessionManager = sessionManager;\n        this.default = value;\n    }\n    /** Use `nextWithinSession` instead! */\n    next(value: T) {\n        console.error('Calling BehaviorSubjectWithinSession.next is not recommended. Call BehaviorSubjectWithinSession.nextWithinSession instead.');\n        super.next(value);\n    }\n    nextWithinSession(value: T, session: UUID) {\n        if (session === this.sessionManager.currentSession) {\n            super.next(value);\n        }\n    }\n    reset() {\n        super.next(this.default);\n    }\n}\n","\nimport { PluginUIContext } from 'molstar/lib/mol-plugin-ui/context';\nimport { createPluginUI } from 'molstar/lib/mol-plugin-ui/react18';\nimport { DefaultPluginUISpec } from 'molstar/lib/mol-plugin-ui/spec';\nimport { PluginConfig } from 'molstar/lib/mol-plugin/config';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Annotation, Segment } from '../volume-api-client-lib/data';\nimport { VolumeApiV2 } from '../volume-api-client-lib/volume-api';\nimport { Debugging, ExampleType, UrlFragmentInfo } from './helpers';\nimport { Session } from './session';\nimport { SubjectSessionManager } from './subject-session-manager';\n\n\nexport const API2 = new VolumeApiV2();\n\nconst MAX_ENTRIES_IN_LIST = 1000;\nconst DEFAULT_EXAMPLE: ExampleType = 'auto';\n\n\nexport class AppModel {\n    public entryList = new BehaviorSubject<{ [source: string]: string[] }>({});\n\n    private subjectMgr = new SubjectSessionManager();\n\n    public exampleType = this.subjectMgr.behaviorSubject<ExampleType | undefined>(undefined);\n    public entryId = this.subjectMgr.behaviorSubject<string>('');\n    public status = this.subjectMgr.behaviorSubject<'ready' | 'loading' | 'error'>('ready');\n    public error = this.subjectMgr.behaviorSubject<any>(undefined);\n\n    public annotation = this.subjectMgr.behaviorSubject<Annotation | undefined>(undefined);\n    public currentSegment = this.subjectMgr.behaviorSubject<Segment | undefined>(undefined);\n    public pdbs = this.subjectMgr.behaviorSubject<string[]>([]);\n    public currentPdb = this.subjectMgr.behaviorSubject<string | undefined>(undefined);\n\n    public session?: Session;\n    private plugin: PluginUIContext = undefined as any;\n\n    async init(target: HTMLElement) {\n        const defaultSpec = DefaultPluginUISpec();\n        this.plugin = await createPluginUI(target, {\n            ...defaultSpec,\n            layout: {\n                initial: {\n                    isExpanded: false,\n                    showControls: true,  // original: false\n                    controlsDisplay: 'landscape',  // original: not given\n                },\n            },\n            components: {\n                // controls: { left: 'none', right: 'none', top: 'none', bottom: 'none' },\n                controls: { right: 'none', top: 'none', bottom: 'none' },\n            },\n            canvas3d: {\n                camera: {\n                    helper: { axes: { name: 'off', params: {} } }\n                }\n            },\n            config: [\n                [PluginConfig.Viewport.ShowExpand, true],  // original: false\n                [PluginConfig.Viewport.ShowControls, true],  // original: false\n                [PluginConfig.Viewport.ShowSelectionMode, false],\n                [PluginConfig.Viewport.ShowAnimation, false],\n            ],\n        });\n\n        API2.getEntryList(MAX_ENTRIES_IN_LIST).then(list => this.entryList.next(list));\n\n        // await Debugging.testApiV2(this.plugin, API2);\n        // return;\n\n        const fragment = UrlFragmentInfo.get();\n        setTimeout(() => this.loadExample(fragment.example ?? DEFAULT_EXAMPLE, fragment.entry), 50); // why setTimeout here?\n    }\n\n    async loadExample(exampleType: ExampleType, entryId?: string) {\n        const sessionId = this.subjectMgr.startNewSession();\n        this.subjectMgr.resetAllSubjects();\n\n        this.session = new Session(sessionId, this, this.plugin);\n\n        const example = this.session.examples[exampleType] ?? this.session.examples[DEFAULT_EXAMPLE];\n        entryId ??= example.defaultEntryId;\n        console.time(`Load example ${example.exampleType} ${entryId}`);\n\n        this.exampleType.nextWithinSession(example.exampleType, sessionId);\n        this.entryId.nextWithinSession(entryId, sessionId);\n        this.status.nextWithinSession('loading', sessionId);\n        UrlFragmentInfo.set({ example: example.exampleType, entry: entryId });\n\n        try {\n            await this.plugin.clear();\n            this.plugin.behaviors.layout.leftPanelTabName.next('data');\n            await example.action(entryId);\n            this.status.nextWithinSession('ready', sessionId);\n        } catch (error) {\n            this.error.nextWithinSession(error, sessionId);\n            this.status.nextWithinSession('error', sessionId);\n            throw error;\n        } finally {\n            console.timeEnd(`Load example ${example.exampleType} ${entryId}`);\n        }\n    }\n}\n\n","import React, { CSSProperties, useEffect, useRef, useState } from 'react';\nimport { useBehavior } from 'molstar/lib/mol-plugin-ui/hooks/use-behavior';\n\nimport 'molstar/lib/mol-plugin-ui/skin/light.scss';\nimport { AppModel } from './model/model';\nimport { Button, ButtonGroup, Checkbox, LinearProgress, CssBaseline, Divider, FormControlLabel, InputLabel, MenuItem, Select, Slider, TextField, Typography, Autocomplete } from '@mui/material';\nimport { createEntryId, splitEntryId } from './model/helpers';\n\n\nexport default function ViewerApp() {\n    return (\n        <div className=\"App\">\n            <CssBaseline>\n                <Main />\n            </CssBaseline>\n        </div>\n    );\n}\n\nconst RightWidth = 360;\n\nfunction Main() {\n    const _model = useRef<AppModel>();\n    if (!_model.current) _model.current = new AppModel();\n    const model = _model.current;\n\n    const example = useBehavior(model.exampleType);\n\n    return <>\n        <div style={{ display: 'flex', flexDirection: 'column', width: RightWidth, position: 'absolute', right: 0, top: 0, bottom: 0, padding: '8px 8px 8px 0', overflow: 'hidden', overflowY: 'auto' }}>\n            <div style={{ marginBottom: 8 }}>\n                <ButtonGroup fullWidth>\n                    <Button variant={example === 'emdb' ? 'contained' : 'outlined'} onClick={() => model.loadExample('emdb')}>EMDB SFF</Button>\n                    <Button variant={example === 'bioimage' ? 'contained' : 'outlined'} onClick={() => model.loadExample('bioimage')}>BioImage Archive</Button>\n                    <Button variant={example === 'meshes' ? 'contained' : 'outlined'} onClick={() => model.loadExample('meshes')}>Meshes</Button>\n                    {/* <Button variant={example === 'meshStreaming' ? 'contained' : 'outlined'} onClick={() => model.loadExample('meshStreaming')}>Mesh Streaming</Button> */}\n                    <Button variant={example === 'auto' ? 'contained' : 'outlined'} onClick={() => model.loadExample('auto')}>Auto</Button>\n                </ButtonGroup>\n            </div>\n\n            {example === 'emdb' && <UIExampleEmdb model={model} />}\n            {example === 'bioimage' && <UIExampleBioimage model={model} />}\n            {example === 'meshes' && <UIExampleMeshes model={model} />}\n            {example === 'meshStreaming' && <UIExampleMeshStreaming model={model} />}\n            {example === 'auto' && <UIExampleAuto model={model} />}\n        </div>\n        {example === 'bioimage' && <img src='/emd-99999.png' alt='' style={{ width: '33%', position: 'absolute', right: 8, bottom: 8, border: '1px solid #777' }} />}\n        <MolStar model={model} />\n    </>;\n}\n\nfunction UIExampleEmdb({ model }: { model: AppModel }) {\n    const annotation = useBehavior(model.annotation);\n    const current = useBehavior(model.currentSegment);\n\n    return <>\n        <EntryForm model={model} action={entryId => model.loadExample('emdb', entryId)} />\n\n        <StatusBar model={model} />\n\n        <EntryDetails model={model} />\n\n        {annotation && <>\n            <Typography variant='h6' style={{ marginTop: 8 }}>Segmentation</Typography>\n            <Button variant={current ? 'outlined' : 'contained'} size='small' onClick={() => model.session?.showSegments(annotation?.segment_list ?? [])}>Show All</Button>\n            {annotation?.segment_list.map((seg) =>\n                <Button size='small' key={seg.id} style={{ marginTop: 4 }} variant={current === seg ? 'contained' : 'outlined'}\n                    onClick={() => model.session?.showSegments([seg])}>\n                    {seg.biological_annotation.name ?? `(Unnamed segment ${seg.id})`}\n                </Button>)\n            }\n            <Divider style={{ margin: '8px 0' }} />\n            {current && <Typography variant='h6'>{current.biological_annotation.name}</Typography>}\n            {current && <div>\n                {current.biological_annotation.external_references.map(r => <div key={r.id}>\n                    <Typography variant='caption' style={{ marginBottom: 8 }}><b>{r.resource}:{r.accession}</b><br />{r.description}</Typography>\n                </div>)}\n            </div>}\n        </>}\n    </>;\n}\n\nfunction UIExampleBioimage({ model }: { model: AppModel }) {\n    const [iso, setIso] = useState(-0.55);\n    const [segm, setSegm] = useState(false);\n\n    return <>\n        <StatusBar model={model} style={{ marginBlock: 8, height: 6, borderRadius: 3 }} />\n        <Typography variant='h6'>Benchmark Airyscan data matching FIB SEM data deposited on EMPIAR</Typography>\n        <a href='https://www.ebi.ac.uk/biostudies/studies/S-BSST707' target='_blank' rel='noreferrer'>Archive Link</a>\n        <Divider style={{ margin: '8px 0' }} />\n        <InputLabel style={{ marginTop: 6, marginBottom: -6 }}>Isovalue</InputLabel>\n        <Slider min={-1} max={-0.35} step={0.025} value={iso} valueLabelDisplay='auto' marks onChange={(_, v) => setIso(v as number)} onChangeCommitted={(_, v) => model.session?.setIsoValue(v as number, segm)} />\n        <FormControlLabel control={<Checkbox value={segm} onChange={e => { setSegm(!!e.target.checked); model.session?.setIsoValue(iso, !segm); }} />} label='Auto-segmentation' />\n        <Typography variant='body1' style={{ textAlign: 'center', marginTop: 16 }}>\n            <b>~500kB of volumetric data</b> to create this rendering.<br />Obtained by converting 600MB of downsampled TIFFs from EMPIAR to MAP (using imod), original dataset size 1.7TB.\n        </Typography>\n    </>;\n}\n\nfunction UIExampleMeshes({ model }: { model: AppModel }) {\n    const entryId = useBehavior(model.entryId);\n    const annotation = useBehavior(model.annotation);\n    const current = useBehavior(model.currentSegment);\n\n    return <>\n        <EntryForm model={model} action={entryId => model.loadExample('meshes', entryId)} />\n        <StatusBar model={model} />\n        <EntryDetails model={model} />\n\n        {annotation && <>\n            <Button variant={current ? 'outlined' : 'contained'} size='small'\n                onClick={() => model.session?.showMeshSegments(annotation?.segment_list ?? [], entryId)}>\n                Show All\n            </Button>\n            {annotation?.segment_list.map(seg =>\n                <Button size='small' key={seg.id} style={{ marginTop: 4 }} variant={current === seg ? 'contained' : 'outlined'}\n                    onClick={() => model.session?.showMeshSegments([seg], entryId)}>\n                    {seg.id}. {seg.biological_annotation.name}\n                </Button>\n            )}\n            <Typography variant='caption' marginTop={2}>\n                If you are viewing \"empiar-10070\", two \"background\" segments are artificially removed.\n            </Typography>\n        </>\n        }\n    </>;\n}\n\nfunction UIExampleMeshStreaming({ model }: { model: AppModel }) {\n    return <>\n        <EntryForm model={model} action={entryId => model.loadExample('meshStreaming', entryId)} />\n        <StatusBar model={model} />\n        <EntryDetails model={model} />\n    </>;\n}\n\nfunction UIExampleAuto({ model }: { model: AppModel }) {\n    const pdbs = useBehavior(model.pdbs);\n    const current = useBehavior(model.currentPdb);\n\n    return <>\n        <Typography variant='caption'>\n            This example shows volume isosurface, lattice segmentation, mesh streaming, and/or fitted PDB models, depending on what data are available.\n        </Typography>\n        <Typography variant='caption'>\n            Try: EMDB 1832 (lattice), EMDB 1181 (lattice+PDB), EMPIAR 10070 (mesh).\n        </Typography>\n        <Divider style={{ marginBlock: 16 }} />\n\n        <EntryForm model={model} action={entryId => model.loadExample('auto', entryId)} />\n        <StatusBar model={model} />\n        <EntryDetails model={model} />\n\n        {pdbs.length > 0 &&\n            <div>\n                <Typography variant='body2' style={{ marginTop: 12, marginBottom: 4 }}>Fitted models in PDB:</Typography>\n                {pdbs.map(pdb =>\n                    <Button key={pdb} size='small' variant={pdb === current ? 'contained' : 'outlined'} style={{ margin: 2, textTransform: 'lowercase' }}\n                        title={pdb === current ? `Remove ${pdb}` : `Load ${pdb}`}\n                        onClick={() => model.session?.showPdb(pdb === current ? undefined : pdb)}>\n                        {pdb}\n                    </Button>)}\n            </div>\n        }\n\n    </>;\n}\n\nfunction EntryForm({ model, action }: { model: AppModel, action: (entryId: string) => any }) {\n    const [source, setSource] = useState('');\n    const [entryNumber, setEntryNumber] = useState('');\n    // const [comboValues, setComboValues] = useState(['1014', '1181', '1547', '1832', '10070']); // TODO useBehavior, get from API\n    const entryList = useBehavior(model.entryList);\n    const comboValues = entryList[source]?.map(entry => splitEntryId(entry).entryNumber).sort() ?? [];\n\n    const entryId = useBehavior(model.entryId);\n    const status = useBehavior(model.status);\n    useEffect(() => {\n        const form = splitEntryId(entryId);\n        setSource(form.source ?? '');\n        setEntryNumber(form.entryNumber ?? '');\n    }, [entryId]);\n\n    return <>\n        <form onSubmit={e => { e.preventDefault(); action(createEntryId(source, entryNumber)); }} >\n            <InputLabel>Source</InputLabel>\n            <Select id='input-source' label='Source' value={source} onChange={e => setSource(e.target.value)} size='small' fullWidth style={{ marginBottom: 8 }}>\n                <MenuItem value='empiar'>EMPIAR</MenuItem>\n                <MenuItem value='emdb'>EMDB</MenuItem>\n                <MenuItem value='idr'>IDR</MenuItem>\n            </Select>\n\n            {/* <InputLabel>Entry ID</InputLabel>\n            <TextField id='input-entry-id' value={entryNumber} onChange={e => setEntryNumber(e.target.value)} size='small' fullWidth style={{ marginBottom: 8 }} /> */}\n\n            <InputLabel>Entry ID</InputLabel>\n            <Autocomplete size='small' fullWidth style={{ marginBottom: 8 }}\n                disablePortal\n                freeSolo // allow non-listed values\n                selectOnFocus\n                id='combo-entry-id'\n                options={comboValues}\n                inputValue={entryNumber}\n                value={entryNumber}\n                onInputChange={(e, value) => { setEntryNumber(value ?? ''); }}\n                onChange={(e, value) => { action(createEntryId(source, value ?? '')); }}\n                renderInput={(params) => <TextField {...params} />}\n            />\n            <Button type='submit' variant='contained' fullWidth disabled={status === 'loading'}>Load</Button>\n        </form>\n    </>;\n}\n\nfunction StatusBar({ model, style }: { model: AppModel, style?: CSSProperties }) {\n    const status = useBehavior(model.status);\n    return <div>\n        <LinearProgress variant={status === 'loading' ? 'indeterminate' : 'determinate'} value={100} color={status === 'error' ? 'error' : 'primary'} style={{ marginBlock: 16, ...style }} />\n    </div>\n}\n\nfunction EntryDetails({ model }: { model: AppModel }) {\n    const entryId = useBehavior(model.entryId);\n    const annotation = useBehavior(model.annotation);\n    const error = useBehavior(model.error);\n\n    if (error) {\n        return <>\n            <Typography variant='caption'>{entryId}</Typography>\n            <Typography variant='h6' color='error'>Error</Typography>\n            <Typography variant='body1' color='error'>{error.toString()}</Typography>\n        </>;\n    } else if (annotation) {\n        return <>\n            <Typography variant='caption'>{entryId}</Typography>\n            <Typography variant='h6'>{annotation?.name ?? 'Untitled'}</Typography>\n            <Typography variant='caption'>{annotation?.details}</Typography>\n        </>;\n    } else {\n        return <Typography variant='caption'>{entryId}</Typography>;\n    }\n\n}\n\nfunction MolStar({ model }: { model: AppModel }) {\n    const target = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (!target.current) return;\n        model.init(target.current!);\n    }, [model]);\n\n    return <div ref={target} style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: RightWidth + 16 }} />;\n}\n"],"names":["DEFAULT_API_PREFIX","hostname","process","REACT_APP_API_HOSTNAME","window","location","protocol","port","REACT_APP_API_PORT","prefix","REACT_APP_API_PREFIX","createApiPrefix","GIT_TAG","REACT_APP_GIT_TAG","getGitTag","GIT_SHA","REACT_APP_GIT_SHA","getGitSha","DEFAULT_VOLUME_SERVER_V2","VolumeApiV2","volumeServerUrl","volumeServerGitTag","volumeServerGitSha","this","replace","console","log","maxEntries","keyword","source","entryId","box","maxPoints","a1","a2","a3","b1","b2","b3","segmentation","segment","detailLevel","fetch","entryListUrl","response","json","metadataUrl","meshSegmentDetails","metadata","segmentId","segmentIds","grid","segmentation_meshes","mesh_component_numbers","segment_ids","undefined","details","detail_lvls","Object","keys","map","s","parseInt","preferredDetail","availDetails","filter","det","Math","max","result","annotation","segment_list","id","Error","segments","dropSet","Set","seg","has","MetadataUtils","UrlFragmentInfo","fragment","hash","fromEntries","URLSearchParams","entries","urlFragmentInfo","toString","CreateVolume","StateTransformer","CreateTransformer","name","from","PluginStateObject","to","params","label","PD","isHidden","description","volume","apply","NodeManager","nodes","key","node","nodeExists","getNode","update","getNodes","delete","setSubtreeVisibility","state","ref","factory","checkValid","splitEntryId","split","entry","entryNumber","createEntryId","logCifOverview","cifData","url","MAX_VALUES","blocks","forEach","block","header","categoryNames","catName","category","categories","nRows","rowCount","fieldNames","fieldName","field","getField","values","toStringArray","slice","join","testApiV2","plugin","api","A","BOX","MAX_VOXELS","urls","volumeUrl","latticeUrl","builders","data","download","isBinary","build","StateTransforms","commit","testVolumeBbox","error","isoValue","volumeDataNode","dataFormats","get","parse","parsed","volumes","volumeData","cell","obj","space","cells","axisOrderSlowToFast","dimensions","nx","ny","nz","minX","minY","minZ","maxX","maxY","maxZ","iz","iy","ix","Debugging","Schema","MS","int","float","Mesh_Data_Schema","mesh","mesh_vertex","mesh_id","vertex_id","x","y","z","mesh_triangle","CIF_schema_mesh","frame","modify","m","scale","qx","qy","qz","vertices","vertexBuffer","value","i","length","shift","dx","dy","dz","matrix","r","size","vertexCount","group","groups","groupBuffer","invertSides","tmp","indices","indexBuffer","normals","normalBuffer","meshFromCif","outSpace","volumeInfoBlock","find","b","meshesBlock","volumeInfoCif","meshCif","nVertices","_rowCount","nTriangles","floor","toArray","vertex_meshId","triangle_meshId","triangle_vertexId","Uint32Array","offsets","offsetMap","offset","flattenCoords","Float32Array","run","gridToCartesian","gridSize","volume_data_3d_info","sample_count","originFract","origin","dimensionFract","Array","meshIds","n","out","Map","set","ColorGenerator","colors","shuffleArray","array","curId","randId","random","CellStarTransform","fromCIF","segmentName","detail","MeshUtils","meshListData","triangleCount","color","boxes","min","coords","unusedVertices","add","v","MeshlistData","MeshlistStateObject","typeClass","ParseMeshlistTransformer","Text","type","Numeric","globalCtx","a","ctx","meshlistData","es","MeshShapeProvider","meshlist","theColor","meshParamDef","geometryUtils","getShape","meshShapeParamDef","Value","alpha","step","isEssential","quality","Select","material","clip","instanceGranularity","Boolean","doubleSided","flipSided","flatShaded","ignoreLight","xrayShaded","transparentBackfaces","arrayToOptions","bumpFrequency","bumpAmplitude","MeshShapeTransformer","display","shapeProvider","fromMeshlistData","Choice","opts","defaultValue","options","nameDict","k","info","MeshServerInfo","MeshSourceChoice","empiar","emdb","serverUrl","PDSelect","biological_annotation","colour","Metadata","DEFAULT_SEGMENT_COLOR","DEBUG_IGNORED_SEGMENTS","MeshStreaming","Params","off","select","all","view","MappedStatic","Group","baseDetail","focusDetail","selectedSegment","isFlat","p","q","VisualInfo","Behavior","parentData","visuals","backgroundSegments","focusObservable","behaviors","interaction","click","pipe","evt","current","loci","kind","shape","sourceData","ownerId","distinctUntilChanged","old","focusSubscription","backgroundSegmentsInitialized","unsubscribe","newParams","copyValues","tree","doNotUpdateCurrent","oldParams","getMetadataUrl","detailsEqual","updateVisualInfoDetails","initVisualInfos","disableVisuals","enableVisuals","guessBackgroundSegments","subscribeObservable","selectSegment","namesAndColors","namesAndColorsBySegment","meshSegments","segid","DetailTypes","detailType","visual","tag","tagFor","visible","highDetail","lowDetail","getSufficientDetail","highDetailSegment","requiredDetailType","getMeshData","getMeshUrl","urlAsset","managers","asset","runTask","resolve","isError","bboxes","bbox","totalBbox","combineBBoxes","totalVolume","isBgSegment","bboxVolume","ViewTypeChoice","prettyName","MeshServerTransformer","MeshStreamingTransformer","create","canAutoUpdate","behavior","getDescription","MeshVisualGroupTransformer","opacity","trySetAutoOpacity","parent","MeshVisualTransformer","spine","visualInfo","groupData","getAncestorOfType","props","getDefaultValues","repr","createOrUpdate","empty","runInContext","oldData","newOpacity","dispose","destroy","InitMeshStreaming","isApplicable","_","serverNode","streamingNode","bgSegments","segmentGroups","isCollapsed","visualsUpdate","updateTree","createMeshFromUrl","meshDataUrl","collapseTree","toRoot","tags","rawDataNode","cifNode","parsedDataNode","stats","shapeNode","reprNode","runMeshStreamingExample","applyAction","useOverlay","getIsovalue","contours","contour_list","contour","theContour","c","primary","level","getPdbIdsForEmdbEntry","toUpperCase","apiUrl","ok","jsonEntry","record","pdbs","fitted_emdb_id_list","pdb_id","push","LatticeSegmentation","segmentationDataBlock","sets","segmentMap","inverseSegmentMap","getSegmentBoundingBoxes","lazyGetter","_getSegmentBoundingBoxes","segmentationValues","toIntArray","makeSegmentMap","invertMultimap","Tensor","segId","newData","customProperties","CustomProperties","_propertyData","mean","sigma","axisOrder","Box","expand","confine","ox","oy","oz","mx","my","mz","newSpace","Uint8Array","newTensor","newSet","jz","jy","jx","setId","newTransform","transform","newFractionalBox","toFractional","origFractSize","Vec3","fractionalBox","time","createSegment","timeEnd","densityServerCif","CIF","volumeFromDensityServerData","self","setBoxes","addPoint_InclusiveEnd","segmentBoxes","setIds","cover","inverted","getter","xFrom","xTo","yFrom","yTo","zFrom","zTo","expandFrom","expandTo","box1","box2","xFrom1","xTo1","yFrom1","yTo1","zFrom1","zTo1","xFrom2","xTo2","yFrom2","yTo2","zFrom2","zTo2","relativeTo","x0","y0","z0","sizeX","sizeY","sizeZ","Box3D","every","USE_GHOST_NODES","Session","model","currentSegments","volumeRepr","entryRoot","groupNodeMgr","segmentationNodeMgr","pdbModelNodeMgr","meshSegmentNodeMgr","exampleEmdb","exampleType","defaultEntryId","action","initMetadata","ExternalAPIs","general","source_db_id","isoLevel","segmentationId","CreateGroup","hasVolumes","volume_downsamplings","hasLattices","segmentation_lattices","segmentation_lattice_ids","API2","Download","isGhost","createVolumeRepresentationParams","typeParams","Volume","colorParams","Color","latticeDataNode","cif","latticeBlock","fromCifBlock","showSegments","exampleBioimage","tryUseGpu","exampleMeshes","dropSegments","showMeshSegments","exampleMeshStreaming","MeshExamples","exampleAuto","isoLevelPromise","pdbsPromise","hasMeshes","nextWithinSession","examples","bioimage","meshes","meshStreaming","auto","getMetadata","pdbId","loadPdbStructureFromBcif","dataLabel","Asset","RawData","dataNode","structure","parseTrajectory","trajectoryNode","hierarchy","applyPreset","status","hideAllNodes","showNode","selector","loadPdb","currentPdb","currentSegment","volumeNode","ColorNames","meshUrl_Bcif","j","o","dataOffset","threshold","root","newValue","showSegmentation","l","segP","createSegment99999Plus","segM","createSegment99999Minus","showSegment","SubjectSessionManager","currentSession","UUID","subjects","subject","BehaviorSubjectWithinSession","reset","sessionManager","default","session","BehaviorSubject","DEFAULT_EXAMPLE","AppModel","entryList","subjectMgr","behaviorSubject","target","defaultSpec","DefaultPluginUISpec","createPluginUI","layout","initial","isExpanded","showControls","controlsDisplay","components","controls","right","top","bottom","canvas3d","camera","helper","axes","config","PluginConfig","getEntryList","then","list","next","setTimeout","loadExample","example","sessionId","startNewSession","resetAllSubjects","clear","leftPanelTabName","ViewerApp","className","CssBaseline","Main","_model","useRef","useBehavior","style","flexDirection","width","position","padding","overflow","overflowY","marginBottom","ButtonGroup","fullWidth","Button","variant","onClick","UIExampleEmdb","UIExampleBioimage","UIExampleMeshes","UIExampleMeshStreaming","UIExampleAuto","src","alt","border","MolStar","EntryForm","StatusBar","EntryDetails","Typography","marginTop","Divider","margin","external_references","resource","accession","useState","iso","setIso","segm","setSegm","marginBlock","height","borderRadius","href","rel","InputLabel","Slider","valueLabelDisplay","marks","onChange","onChangeCommitted","setIsoValue","FormControlLabel","control","Checkbox","e","checked","textAlign","pdb","textTransform","title","showPdb","setSource","setEntryNumber","comboValues","sort","useEffect","form","onSubmit","preventDefault","MenuItem","Autocomplete","disablePortal","freeSolo","selectOnFocus","inputValue","onInputChange","renderInput","TextField","disabled","LinearProgress","init","left","RightWidth"],"sourceRoot":""}